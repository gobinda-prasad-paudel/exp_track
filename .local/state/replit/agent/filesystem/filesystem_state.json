{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ExpenseTracker\n\n## Overview\n\nExpenseTracker is a modern web application for personal finance management that supports both Gregorian and Bikram Sambat date systems. The application provides comprehensive expense and income tracking with categorization, analytics, and PDF export capabilities. Built with a focus on local data storage for privacy, it features a responsive design with a dashboard for financial insights and transaction management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety and modern development\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React Context API for authentication state and React Hook Form for form management\n- **Data Fetching**: TanStack Query for server state management and caching\n- **Animations**: Framer Motion for smooth transitions and micro-interactions\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Server**: Express.js with TypeScript for API endpoints\n- **Database**: Configured for PostgreSQL with Neon Database serverless driver\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Session Management**: PostgreSQL-based session storage\n- **Development**: Hot module replacement with Vite integration\n\n### Data Storage Solutions\n- **Primary Storage**: In-memory storage implementation with plans for PostgreSQL migration\n- **Local Storage**: Browser localStorage for client-side data persistence\n- **Schema Management**: Shared TypeScript schemas using Zod for validation\n- **Migration Support**: Drizzle Kit for database schema migrations\n\n### Authentication and Authorization\n- **Authentication**: Custom email/password authentication with session management\n- **User Management**: Local user registration and login with encrypted storage\n- **Session Handling**: Server-side session management with PostgreSQL backend\n- **Authorization**: Route-based protection with authentication context\n\n### Component Architecture\n- **Design System**: shadcn/ui components with Radix UI primitives\n- **Layout System**: Responsive layout with sidebar navigation and top navbar\n- **Form Handling**: React Hook Form with Zod validation schemas\n- **Data Visualization**: Custom stat cards and transaction lists with sorting/filtering\n\n### Date System Support\n- **Dual Calendar**: Support for both Gregorian and Bikram Sambat date systems\n- **Date Conversion**: Custom utilities for AD to BS date conversion\n- **Localization**: Nepali numerals and month names for BS dates\n\n### Transaction Management\n- **Categories**: Predefined income and expense categories with icon mapping\n- **CRUD Operations**: Full create, read, update, delete functionality\n- **Filtering**: Advanced filtering by date range, type, and category\n- **Search**: Text-based search across transaction descriptions and categories\n\n### Export Features\n- **PDF Generation**: jsPDF integration for transaction reports\n- **Report Customization**: Configurable date ranges and transaction types\n- **Summary Statistics**: Automated calculation of totals and balances\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18 with DOM rendering, TypeScript support\n- **Vite**: Build tool with React plugin and runtime error overlay\n- **TanStack Query**: Server state management and caching\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework with PostCSS processing\n- **shadcn/ui**: Component library built on Radix UI primitives\n- **Radix UI**: Headless UI components for accessibility\n- **Lucide React**: Icon library for consistent iconography\n- **Framer Motion**: Animation library for enhanced user experience\n\n### Backend Services\n- **Neon Database**: Serverless PostgreSQL database provider\n- **Drizzle ORM**: Type-safe database toolkit with PostgreSQL dialect\n- **Express.js**: Web application framework for Node.js\n\n### Form and Validation\n- **React Hook Form**: Form library with validation support\n- **Zod**: TypeScript-first schema validation\n- **@hookform/resolvers**: Integration between React Hook Form and Zod\n\n### Development Tools\n- **TypeScript**: Static type checking and enhanced developer experience\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Replit Plugins**: Development environment integration and cartographer\n\n### Utility Libraries\n- **date-fns**: Date manipulation and formatting utilities\n- **clsx**: Conditional className utility\n- **class-variance-authority**: Component variant management\n- **nanoid**: Unique ID generation for client-side operations\n\n### PDF and Export\n- **jsPDF**: Client-side PDF generation for transaction reports","size_bytes":4861},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"slide-in\": {\n          from: {\n            transform: \"translateX(-100%)\",\n          },\n          to: {\n            transform: \"translateX(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.3s ease-out\",\n        \"slide-in\": \"slide-in 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3249},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\nexport const userSchema = z.object({\n  id: z.string(),\n  username: z.string().min(3),\n  email: z.string().email(),\n  password: z.string().min(6),\n  firstName: z.string().min(1),\n  lastName: z.string().min(1),\n  createdAt: z.string(),\n});\n\nexport const incomeCategories = [\n  \"Salary\",\n  \"Freelance\", \n  \"Business\",\n  \"Investment\",\n  \"Rental\",\n  \"Gift\",\n  \"Bonus\",\n  \"Pension\",\n  \"Other\",\n] as const;\n\nexport const expenseCategories = [\n  \"Food & Dining\",\n  \"Transportation\", \n  \"Education\",\n  \"Shopping\",\n  \"Entertainment\",\n  \"Bills & Utilities\",\n  \"Healthcare\",\n  \"Travel\",\n  \"Other\",\n] as const;\n\nexport const transactionSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  type: z.enum([\"income\", \"expense\"]),\n  amount: z.number().positive(),\n  category: z.string(),\n  description: z.string().optional(),\n  date: z.string(), // ISO date string\n  bsDate: z.string(), // Bikram Sambat date string\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\nexport const insertUserSchema = userSchema.omit({ id: true, createdAt: true });\nexport const insertTransactionSchema = transactionSchema.omit({ \n  id: true, \n  userId: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Transaction = z.infer<typeof transactionSchema>;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type IncomeCategory = typeof incomeCategories[number];\nexport type ExpenseCategory = typeof expenseCategories[number];\n","size_bytes":1573},"backend/src/app.js":{"content":"const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst http = require('http');\nconst socketIo = require('socket.io');\nrequire('dotenv').config();\n\nconst authRoutes = require('./routes/auth');\nconst transactionRoutes = require('./routes/transactions');\nconst adminRoutes = require('./routes/admin');\n\nconst app = express();\nconst server = http.createServer(app);\n\n// Socket.IO setup with CORS\nconst io = socketIo(server, {\n  cors: {\n    origin: \"*\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\n\n// Middleware\napp.use(cors({\n  origin: \"*\",\n  credentials: true\n}));\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// MongoDB connection\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/expense-tracker', {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error('Error connecting to MongoDB:', error.message);\n    process.exit(1);\n  }\n};\n\nconnectDB();\n\n// Socket.IO middleware - make io available to routes\napp.use((req, res, next) => {\n  req.io = io;\n  next();\n});\n\n// Routes\napp.use('/api/auth', authRoutes);\napp.use('/api/transactions', transactionRoutes);\napp.use('/api/admin', adminRoutes);\n\n// Health check\napp.get('/api/health', (req, res) => {\n  res.json({ status: 'OK', message: 'Expense Tracker API is running' });\n});\n\n// Socket.IO connection handling\nio.on('connection', (socket) => {\n  console.log('Admin connected:', socket.id);\n  \n  socket.on('join-admin', () => {\n    socket.join('admin-room');\n    console.log('Admin joined admin room');\n  });\n  \n  socket.on('disconnect', () => {\n    console.log('Admin disconnected:', socket.id);\n  });\n});\n\nconst PORT = process.env.PORT || 5001;\n\nserver.listen(PORT, () => {\n  console.log(`Backend server running on port ${PORT}`);\n});\n\nmodule.exports = { app, io };","size_bytes":1989},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/context/AuthContext\";\nimport { Layout } from \"@/components/Layout\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\n// Pages\nimport Home from \"@/pages/Home\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Income from \"@/pages/Income\";\nimport Expenses from \"@/pages/Expenses\";\nimport Transactions from \"@/pages/Transactions\";\nimport ExportPDF from \"@/pages/ExportPDF\";\nimport Login from \"@/pages/Login\";\nimport Signup from \"@/pages/Signup\";\nimport Profile from \"@/pages/Profile\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated } = useAuth();\n  \n  if (!isAuthenticated) {\n    return <Redirect to=\"/login\" />;\n  }\n  \n  return <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/signup\" component={Signup} />\n        \n        <Route path=\"/dashboard\">\n          <ProtectedRoute>\n            <Dashboard />\n          </ProtectedRoute>\n        </Route>\n        \n        <Route path=\"/income\">\n          <ProtectedRoute>\n            <Income />\n          </ProtectedRoute>\n        </Route>\n        \n        <Route path=\"/expenses\">\n          <ProtectedRoute>\n            <Expenses />\n          </ProtectedRoute>\n        </Route>\n        \n        <Route path=\"/transactions\">\n          <ProtectedRoute>\n            <Transactions />\n          </ProtectedRoute>\n        </Route>\n        \n        <Route path=\"/export-pdf\">\n          <ProtectedRoute>\n            <ExportPDF />\n          </ProtectedRoute>\n        </Route>\n        \n        <Route path=\"/profile\">\n          <ProtectedRoute>\n            <Profile />\n          </ProtectedRoute>\n        </Route>\n        \n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2438},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Geist:wght@100;200;300;400;500;600;700;800;900&family=Geist+Mono:wght@100;200;300;400;500;600;700;800;900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  --primary: hsl(217.2 91% 59.8%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222.2 47.4% 11.2%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 47.4% 11.2%);\n  --destructive: hsl(0 72.2% 50.6%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(217.2 91% 59.8%);\n  --chart-1: hsl(217.2 91% 59.8%);\n  --chart-2: hsl(173.4 80% 36.1%);\n  --chart-3: hsl(197.4 73.7% 51.8%);\n  --chart-4: hsl(43.3 96.4% 56.3%);\n  --chart-5: hsl(27.8 95.8% 53.3%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(217.2 91% 59.8%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222.2 47.4% 11.2%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(217.2 91% 59.8%);\n  --font-sans: 'Geist', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Geist Mono', monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.2 91% 59.8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.2 91% 59.8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.2 91% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91% 59.8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.2 91% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91% 59.8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.2 91% 59.8% / 0.00), 0px 2px 4px -1px hsl(217.2 91% 59.8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.2 91% 59.8% / 0.00), 0px 4px 6px -1px hsl(217.2 91% 59.8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.2 91% 59.8% / 0.00), 0px 8px 10px -1px hsl(217.2 91% 59.8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.2 91% 59.8% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217.2 91% 59.8%);\n  --primary-foreground: hsl(222.2 47.4% 11.2%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(217.2 91% 59.8%);\n  --sidebar: hsl(222.2 84% 4.9%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(217.2 91% 59.8%);\n  --sidebar-primary-foreground: hsl(222.2 47.4% 11.2%);\n  --sidebar-accent: hsl(217.2 32.6% 17.5%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(217.2 32.6% 17.5%);\n  --sidebar-ring: hsl(217.2 91% 59.8%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.stat-card {\n  transition: all 0.2s ease;\n}\n\n.stat-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n}\n\n.transaction-item:hover {\n  background-color: hsl(var(--muted));\n}\n\n.sidebar-nav-link:hover {\n  background-color: hsl(var(--accent));\n  color: hsl(var(--accent-foreground));\n}\n\n.sidebar-nav-link.active {\n  background-color: hsl(var(--primary));\n  color: hsl(var(--primary-foreground));\n}\n","size_bytes":4088},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"backend/src/middleware/auth.js":{"content":"const jwt = require('jsonwebtoken');\nconst User = require('../models/User');\nconst Admin = require('../models/Admin');\n\nconst authenticateUser = async (req, res, next) => {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '');\n    \n    if (!token) {\n      return res.status(401).json({ message: 'No token, authorization denied' });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret');\n    const user = await User.findById(decoded.id).select('-password');\n    \n    if (!user) {\n      return res.status(401).json({ message: 'Token is not valid' });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    res.status(401).json({ message: 'Token is not valid' });\n  }\n};\n\nconst authenticateAdmin = async (req, res, next) => {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '');\n    \n    if (!token) {\n      return res.status(401).json({ message: 'No token, authorization denied' });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret');\n    const admin = await Admin.findById(decoded.id).select('-password');\n    \n    if (!admin || !admin.isActive) {\n      return res.status(401).json({ message: 'Token is not valid' });\n    }\n\n    req.admin = admin;\n    next();\n  } catch (error) {\n    res.status(401).json({ message: 'Token is not valid' });\n  }\n};\n\nmodule.exports = { authenticateUser, authenticateAdmin };","size_bytes":1440},"backend/src/models/Admin.js":{"content":"const mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\n\nconst adminSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    lowercase: true\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6\n  },\n  firstName: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  lastName: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  role: {\n    type: String,\n    default: 'admin',\n    enum: ['admin', 'super-admin']\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  }\n}, {\n  timestamps: true\n});\n\n// Hash password before saving\nadminSchema.pre('save', async function(next) {\n  if (!this.isModified('password')) return next();\n  this.password = await bcrypt.hash(this.password, 12);\n  next();\n});\n\n// Compare password method\nadminSchema.methods.comparePassword = async function(candidatePassword) {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\n// Don't return password in JSON\nadminSchema.methods.toJSON = function() {\n  const adminObject = this.toObject();\n  delete adminObject.password;\n  return adminObject;\n};\n\nmodule.exports = mongoose.model('Admin', adminSchema);","size_bytes":1297},"backend/src/models/Transaction.js":{"content":"const mongoose = require('mongoose');\n\nconst transactionSchema = new mongoose.Schema({\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  type: {\n    type: String,\n    enum: ['income', 'expense'],\n    required: true\n  },\n  amount: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  category: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  description: {\n    type: String,\n    trim: true\n  },\n  date: {\n    type: Date,\n    required: true\n  },\n  bsDate: {\n    type: String,\n    required: true\n  }\n}, {\n  timestamps: true\n});\n\n// Index for better query performance\ntransactionSchema.index({ userId: 1, date: -1 });\ntransactionSchema.index({ userId: 1, type: 1 });\n\nmodule.exports = mongoose.model('Transaction', transactionSchema);","size_bytes":796},"backend/src/models/User.js":{"content":"const mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    minlength: 3\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    lowercase: true\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6\n  },\n  firstName: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  lastName: {\n    type: String,\n    required: true,\n    trim: true\n  }\n}, {\n  timestamps: true\n});\n\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n  if (!this.isModified('password')) return next();\n  this.password = await bcrypt.hash(this.password, 12);\n  next();\n});\n\n// Compare password method\nuserSchema.methods.comparePassword = async function(candidatePassword) {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\n// Don't return password in JSON\nuserSchema.methods.toJSON = function() {\n  const userObject = this.toObject();\n  delete userObject.password;\n  return userObject;\n};\n\nmodule.exports = mongoose.model('User', userSchema);","size_bytes":1160},"backend/src/routes/admin.js":{"content":"const express = require('express');\nconst jwt = require('jsonwebtoken');\nconst Admin = require('../models/Admin');\nconst User = require('../models/User');\nconst Transaction = require('../models/Transaction');\nconst { authenticateAdmin } = require('../middleware/auth');\n\nconst router = express.Router();\n\n// Generate JWT Token\nconst generateToken = (id) => {\n  return jwt.sign({ id }, process.env.JWT_SECRET || 'fallback-secret', {\n    expiresIn: '30d',\n  });\n};\n\n// @route   POST /api/admin/register\n// @desc    Register admin\n// @access  Public (you might want to restrict this)\nrouter.post('/register', async (req, res) => {\n  try {\n    const { username, email, password, firstName, lastName } = req.body;\n\n    // Check if admin exists\n    const existingAdmin = await Admin.findOne({\n      $or: [{ email }, { username }]\n    });\n\n    if (existingAdmin) {\n      return res.status(400).json({\n        message: 'Admin already exists with this email or username'\n      });\n    }\n\n    // Create admin\n    const admin = await Admin.create({\n      username,\n      email,\n      password,\n      firstName,\n      lastName\n    });\n\n    const token = generateToken(admin._id);\n\n    res.status(201).json({\n      success: true,\n      token,\n      admin: {\n        id: admin._id,\n        username: admin.username,\n        email: admin.email,\n        firstName: admin.firstName,\n        lastName: admin.lastName,\n        role: admin.role\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error during admin registration' });\n  }\n});\n\n// @route   POST /api/admin/login\n// @desc    Login admin\n// @access  Public\nrouter.post('/login', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    // Check for admin\n    const admin = await Admin.findOne({ email, isActive: true });\n    if (!admin) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    // Check password\n    const isMatch = await admin.comparePassword(password);\n    if (!isMatch) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    const token = generateToken(admin._id);\n\n    res.json({\n      success: true,\n      token,\n      admin: {\n        id: admin._id,\n        username: admin.username,\n        email: admin.email,\n        firstName: admin.firstName,\n        lastName: admin.lastName,\n        role: admin.role\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error during admin login' });\n  }\n});\n\n// @route   GET /api/admin/dashboard\n// @desc    Get admin dashboard data\n// @access  Private (Admin)\nrouter.get('/dashboard', authenticateAdmin, async (req, res) => {\n  try {\n    const totalUsers = await User.countDocuments();\n    const totalTransactions = await Transaction.countDocuments();\n    \n    const totalIncome = await Transaction.aggregate([\n      { $match: { type: 'income' } },\n      { $group: { _id: null, total: { $sum: '$amount' } } }\n    ]);\n    \n    const totalExpenses = await Transaction.aggregate([\n      { $match: { type: 'expense' } },\n      { $group: { _id: null, total: { $sum: '$amount' } } }\n    ]);\n\n    // Recent transactions with user info\n    const recentTransactions = await Transaction.find()\n      .populate('userId', 'firstName lastName email username')\n      .sort({ createdAt: -1 })\n      .limit(20);\n\n    // Recent users\n    const recentUsers = await User.find()\n      .sort({ createdAt: -1 })\n      .limit(10)\n      .select('-password');\n\n    // Monthly statistics\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getFullYear();\n\n    const thisMonthUsers = await User.countDocuments({\n      createdAt: {\n        $gte: new Date(currentYear, currentMonth, 1),\n        $lt: new Date(currentYear, currentMonth + 1, 1)\n      }\n    });\n\n    const thisMonthTransactions = await Transaction.countDocuments({\n      createdAt: {\n        $gte: new Date(currentYear, currentMonth, 1),\n        $lt: new Date(currentYear, currentMonth + 1, 1)\n      }\n    });\n\n    res.json({\n      success: true,\n      dashboard: {\n        stats: {\n          totalUsers,\n          totalTransactions,\n          totalIncome: totalIncome[0]?.total || 0,\n          totalExpenses: totalExpenses[0]?.total || 0,\n          thisMonthUsers,\n          thisMonthTransactions\n        },\n        recentTransactions,\n        recentUsers\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\n// @route   GET /api/admin/users\n// @desc    Get all users\n// @access  Private (Admin)\nrouter.get('/users', authenticateAdmin, async (req, res) => {\n  try {\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 10;\n    const skip = (page - 1) * limit;\n\n    const users = await User.find()\n      .select('-password')\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(limit);\n\n    const total = await User.countDocuments();\n\n    res.json({\n      success: true,\n      users,\n      pagination: {\n        currentPage: page,\n        totalPages: Math.ceil(total / limit),\n        totalUsers: total,\n        hasNext: page < Math.ceil(total / limit),\n        hasPrev: page > 1\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\n// @route   GET /api/admin/transactions\n// @desc    Get all transactions\n// @access  Private (Admin)\nrouter.get('/transactions', authenticateAdmin, async (req, res) => {\n  try {\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 20;\n    const skip = (page - 1) * limit;\n\n    const transactions = await Transaction.find()\n      .populate('userId', 'firstName lastName email username')\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(limit);\n\n    const total = await Transaction.countDocuments();\n\n    res.json({\n      success: true,\n      transactions,\n      pagination: {\n        currentPage: page,\n        totalPages: Math.ceil(total / limit),\n        totalTransactions: total,\n        hasNext: page < Math.ceil(total / limit),\n        hasPrev: page > 1\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\nmodule.exports = router;","size_bytes":6386},"backend/src/routes/auth.js":{"content":"const express = require('express');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User');\nconst { authenticateUser } = require('../middleware/auth');\n\nconst router = express.Router();\n\n// Generate JWT Token\nconst generateToken = (id) => {\n  return jwt.sign({ id }, process.env.JWT_SECRET || 'fallback-secret', {\n    expiresIn: '30d',\n  });\n};\n\n// @route   POST /api/auth/register\n// @desc    Register user\n// @access  Public\nrouter.post('/register', async (req, res) => {\n  try {\n    const { username, email, password, firstName, lastName } = req.body;\n\n    // Check if user exists\n    const existingUser = await User.findOne({\n      $or: [{ email }, { username }]\n    });\n\n    if (existingUser) {\n      return res.status(400).json({\n        message: 'User already exists with this email or username'\n      });\n    }\n\n    // Create user\n    const user = await User.create({\n      username,\n      email,\n      password,\n      firstName,\n      lastName\n    });\n\n    const token = generateToken(user._id);\n\n    res.status(201).json({\n      success: true,\n      token,\n      user: {\n        id: user._id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error during registration' });\n  }\n});\n\n// @route   POST /api/auth/login\n// @desc    Login user\n// @access  Public\nrouter.post('/login', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    // Check for user\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    // Check password\n    const isMatch = await user.comparePassword(password);\n    if (!isMatch) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    const token = generateToken(user._id);\n\n    res.json({\n      success: true,\n      token,\n      user: {\n        id: user._id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error during login' });\n  }\n});\n\n// @route   GET /api/auth/me\n// @desc    Get user data\n// @access  Private\nrouter.get('/me', authenticateUser, async (req, res) => {\n  try {\n    res.json({\n      success: true,\n      user: {\n        id: req.user._id,\n        username: req.user.username,\n        email: req.user.email,\n        firstName: req.user.firstName,\n        lastName: req.user.lastName\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\nmodule.exports = router;","size_bytes":2815},"backend/src/routes/transactions.js":{"content":"const express = require('express');\nconst Transaction = require('../models/Transaction');\nconst { authenticateUser } = require('../middleware/auth');\n\nconst router = express.Router();\n\n// @route   GET /api/transactions\n// @desc    Get all transactions for user\n// @access  Private\nrouter.get('/', authenticateUser, async (req, res) => {\n  try {\n    const transactions = await Transaction.find({ userId: req.user._id })\n      .sort({ createdAt: -1 });\n    \n    res.json({\n      success: true,\n      transactions\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\n// @route   POST /api/transactions\n// @desc    Create new transaction\n// @access  Private\nrouter.post('/', authenticateUser, async (req, res) => {\n  try {\n    const { type, amount, category, description, date, bsDate } = req.body;\n\n    const transaction = await Transaction.create({\n      userId: req.user._id,\n      type,\n      amount,\n      category,\n      description,\n      date,\n      bsDate\n    });\n\n    // Emit real-time update to admin\n    req.io.to('admin-room').emit('transaction-added', {\n      transaction: {\n        ...transaction.toJSON(),\n        user: {\n          firstName: req.user.firstName,\n          lastName: req.user.lastName,\n          email: req.user.email\n        }\n      }\n    });\n\n    res.status(201).json({\n      success: true,\n      transaction\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\n// @route   PUT /api/transactions/:id\n// @desc    Update transaction\n// @access  Private\nrouter.put('/:id', authenticateUser, async (req, res) => {\n  try {\n    const transaction = await Transaction.findOne({\n      _id: req.params.id,\n      userId: req.user._id\n    });\n\n    if (!transaction) {\n      return res.status(404).json({ message: 'Transaction not found' });\n    }\n\n    const updatedTransaction = await Transaction.findByIdAndUpdate(\n      req.params.id,\n      req.body,\n      { new: true, runValidators: true }\n    );\n\n    // Emit real-time update to admin\n    req.io.to('admin-room').emit('transaction-updated', {\n      transaction: {\n        ...updatedTransaction.toJSON(),\n        user: {\n          firstName: req.user.firstName,\n          lastName: req.user.lastName,\n          email: req.user.email\n        }\n      }\n    });\n\n    res.json({\n      success: true,\n      transaction: updatedTransaction\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\n// @route   DELETE /api/transactions/:id\n// @desc    Delete transaction\n// @access  Private\nrouter.delete('/:id', authenticateUser, async (req, res) => {\n  try {\n    const transaction = await Transaction.findOne({\n      _id: req.params.id,\n      userId: req.user._id\n    });\n\n    if (!transaction) {\n      return res.status(404).json({ message: 'Transaction not found' });\n    }\n\n    await Transaction.findByIdAndDelete(req.params.id);\n\n    // Emit real-time update to admin\n    req.io.to('admin-room').emit('transaction-deleted', {\n      transactionId: req.params.id,\n      user: {\n        firstName: req.user.firstName,\n        lastName: req.user.lastName,\n        email: req.user.email\n      }\n    });\n\n    res.json({\n      success: true,\n      message: 'Transaction deleted'\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\n// @route   GET /api/transactions/stats\n// @desc    Get user transaction statistics\n// @access  Private\nrouter.get('/stats', authenticateUser, async (req, res) => {\n  try {\n    const transactions = await Transaction.find({ userId: req.user._id });\n    \n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getFullYear();\n\n    const totalIncome = transactions\n      .filter(t => t.type === 'income')\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const totalExpenses = transactions\n      .filter(t => t.type === 'expense')\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const thisMonthIncome = transactions\n      .filter(t => {\n        const tDate = new Date(t.date);\n        return t.type === 'income' && \n               tDate.getMonth() === currentMonth && \n               tDate.getFullYear() === currentYear;\n      })\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const thisMonthExpenses = transactions\n      .filter(t => {\n        const tDate = new Date(t.date);\n        return t.type === 'expense' && \n               tDate.getMonth() === currentMonth && \n               tDate.getFullYear() === currentYear;\n      })\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const recentTransactions = transactions\n      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\n      .slice(0, 10);\n\n    res.json({\n      success: true,\n      stats: {\n        totalBalance: totalIncome - totalExpenses,\n        totalIncome,\n        totalExpenses,\n        thisMonthIncome,\n        thisMonthExpenses,\n        totalTransactions: transactions.length,\n        recentTransactions\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\nmodule.exports = router;","size_bytes":5257},"client/src/components/Layout.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { Sidebar } from \"./Sidebar\";\nimport { TopNavbar } from \"./TopNavbar\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  const [location] = useLocation();\n  const isHomePage = location === \"/\";\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {isHomePage ? (\n        <div className=\"flex flex-col min-h-screen\">\n          <TopNavbar />\n          <main className=\"flex-1\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3 }}\n            >\n              {children}\n            </motion.div>\n          </main>\n        </div>\n      ) : (\n        <div className=\"flex h-screen\">\n          <Sidebar />\n          <main className=\"flex-1 overflow-auto\">\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.3 }}\n              className=\"h-full\"\n            >\n              {children}\n            </motion.div>\n          </main>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":1236},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { getCurrentBSDateString } from \"@/lib/date-utils\";\nimport {\n  Wallet,\n  BarChart3,\n  TrendingUp,\n  TrendingDown,\n  List,\n  FileText,\n  User,\n  LogOut,\n} from \"lucide-react\";\n\nconst navItems = [\n  { path: \"/dashboard\", label: \"Dashboard\", icon: BarChart3 },\n  { path: \"/income\", label: \"Income\", icon: TrendingUp },\n  { path: \"/expenses\", label: \"Expenses\", icon: TrendingDown },\n  { path: \"/transactions\", label: \"Transactions\", icon: List },\n  { path: \"/export-pdf\", label: \"Export PDF\", icon: FileText },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  return (\n    <motion.aside\n      initial={{ x: -300 }}\n      animate={{ x: 0 }}\n      transition={{ duration: 0.3 }}\n      className=\"w-64 bg-card border-r border-border shadow-sm\"\n    >\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <Wallet className=\"h-5 w-5 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-xl font-semibold text-foreground\">ExpenseTracker</h1>\n        </div>\n        <div className=\"mt-4 text-sm text-muted-foreground\" data-testid=\"text-bs-date\">\n          {getCurrentBSDateString()}\n        </div>\n        {user && (\n          <div className=\"mt-2 text-sm text-foreground\" data-testid=\"text-username\">\n            Welcome, {user.firstName}\n          </div>\n        )}\n      </div>\n\n      <nav className=\"p-4 space-y-2\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.path;\n          \n          return (\n            <Link key={item.path} href={item.path} data-testid={`link-${item.label.toLowerCase().replace(' ', '-')}`}>\n              <motion.div\n                whileHover={{ x: 4 }}\n                transition={{ duration: 0.2 }}\n                className={`sidebar-nav-link flex items-center space-x-3 px-3 py-2 rounded-md transition-colors duration-200 ${\n                  isActive\n                    ? \"active bg-primary text-primary-foreground\"\n                    : \"text-muted-foreground hover:text-foreground\"\n                }`}\n              >\n                <Icon className=\"h-5 w-5\" />\n                <span className=\"font-medium\">{item.label}</span>\n              </motion.div>\n            </Link>\n          );\n        })}\n\n        <div className=\"pt-4 mt-4 border-t border-border\">\n          <Link href=\"/profile\" data-testid=\"link-profile\">\n            <motion.div\n              whileHover={{ x: 4 }}\n              transition={{ duration: 0.2 }}\n              className={`sidebar-nav-link flex items-center space-x-3 px-3 py-2 rounded-md transition-colors duration-200 ${\n                location === \"/profile\"\n                  ? \"active bg-primary text-primary-foreground\"\n                  : \"text-muted-foreground hover:text-foreground\"\n              }`}\n            >\n              <User className=\"h-5 w-5\" />\n              <span className=\"font-medium\">Profile</span>\n            </motion.div>\n          </Link>\n\n          <motion.button\n            whileHover={{ x: 4 }}\n            transition={{ duration: 0.2 }}\n            onClick={logout}\n            data-testid=\"button-logout\"\n            className=\"sidebar-nav-link w-full flex items-center space-x-3 px-3 py-2 rounded-md text-muted-foreground hover:text-foreground transition-colors duration-200\"\n          >\n            <LogOut className=\"h-5 w-5\" />\n            <span className=\"font-medium\">Logout</span>\n          </motion.button>\n        </div>\n      </nav>\n    </motion.aside>\n  );\n}\n","size_bytes":3803},"client/src/components/StatCard.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatCardProps {\n  title: string;\n  value: string;\n  change?: string;\n  changeType?: \"positive\" | \"negative\";\n  icon: LucideIcon;\n  iconBgColor?: string;\n  iconColor?: string;\n  testId?: string;\n}\n\nexport function StatCard({\n  title,\n  value,\n  change,\n  changeType = \"positive\",\n  icon: Icon,\n  iconBgColor = \"bg-primary/10\",\n  iconColor = \"text-primary\",\n  testId\n}: StatCardProps) {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      whileHover={{ y: -4 }}\n      className=\"stat-card bg-card rounded-lg border border-border p-6 shadow-sm\"\n      data-testid={testId}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n          <p className=\"text-2xl font-bold text-foreground\" data-testid={`text-${testId}-value`}>\n            {value}\n          </p>\n        </div>\n        <div className={`w-12 h-12 ${iconBgColor} rounded-lg flex items-center justify-center`}>\n          <Icon className={`${iconColor} text-lg h-6 w-6`} />\n        </div>\n      </div>\n      {change && (\n        <div className=\"flex items-center mt-4 text-sm\">\n          <span\n            className={`font-medium ${\n              changeType === \"positive\" ? \"text-green-500\" : \"text-red-500\"\n            }`}\n          >\n            {change}\n          </span>\n          <span className=\"text-muted-foreground ml-1\">from last month</span>\n        </div>\n      )}\n    </motion.div>\n  );\n}\n","size_bytes":1649},"client/src/components/TopNavbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from \"framer-motion\";\nimport { Wallet, LogIn, UserPlus } from \"lucide-react\";\n\nexport function TopNavbar() {\n  const [location] = useLocation();\n\n  return (\n    <motion.nav \n      initial={{ opacity: 0, y: -20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      className=\"bg-card border-b border-border shadow-sm\"\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" data-testid=\"link-home\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Wallet className=\"h-5 w-5 text-primary-foreground\" />\n              </div>\n              <h1 className=\"text-xl font-semibold text-foreground\">ExpenseTracker</h1>\n            </div>\n          </Link>\n\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/login\" data-testid=\"link-login\">\n              <Button variant=\"ghost\" className=\"flex items-center space-x-2\">\n                <LogIn className=\"h-4 w-4\" />\n                <span>Login</span>\n              </Button>\n            </Link>\n            <Link href=\"/signup\" data-testid=\"link-signup\">\n              <Button className=\"flex items-center space-x-2\">\n                <UserPlus className=\"h-4 w-4\" />\n                <span>Sign Up</span>\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </motion.nav>\n  );\n}\n","size_bytes":1653},"client/src/components/TransactionForm.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Transaction, InsertTransaction } from \"@shared/schema\";\nimport { INCOME_CATEGORIES, EXPENSE_CATEGORIES } from \"@/lib/constants\";\nimport { formatDateForInput } from \"@/lib/date-utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst transactionFormSchema = z.object({\n  type: z.enum([\"income\", \"expense\"]),\n  amount: z.number().positive(\"Amount must be positive\"),\n  category: z.string().min(1, \"Category is required\"),\n  description: z.string().optional(),\n  date: z.string().min(1, \"Date is required\"),\n});\n\ntype TransactionFormData = z.infer<typeof transactionFormSchema>;\n\ninterface TransactionFormProps {\n  transaction?: Transaction;\n  onSubmit: (data: InsertTransaction) => Promise<void>;\n  onCancel?: () => void;\n  isEditing?: boolean;\n}\n\nexport function TransactionForm({ \n  transaction, \n  onSubmit, \n  onCancel, \n  isEditing = false \n}: TransactionFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<TransactionFormData>({\n    resolver: zodResolver(transactionFormSchema),\n    defaultValues: {\n      type: transaction?.type || \"expense\",\n      amount: transaction?.amount || 0,\n      category: transaction?.category || \"\",\n      description: transaction?.description || \"\",\n      date: transaction ? formatDateForInput(new Date(transaction.date)) : formatDateForInput(new Date()),\n    },\n  });\n\n  const watchedType = form.watch(\"type\");\n  const categories = watchedType === \"income\" ? INCOME_CATEGORIES : EXPENSE_CATEGORIES;\n\n  const handleSubmit = async (data: TransactionFormData) => {\n    setIsSubmitting(true);\n    try {\n      await onSubmit(data);\n      if (!isEditing) {\n        form.reset();\n        toast({\n          title: \"Success\",\n          description: \"Transaction added successfully\",\n        });\n      } else {\n        toast({\n          title: \"Success\", \n          description: \"Transaction updated successfully\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save transaction\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Card>\n        <CardHeader>\n          <CardTitle data-testid=\"text-form-title\">\n            {isEditing ? \"Edit Transaction\" : \"Add New Transaction\"}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"type\">Type</Label>\n                <Select \n                  value={form.watch(\"type\")} \n                  onValueChange={(value) => form.setValue(\"type\", value as \"income\" | \"expense\")}\n                  data-testid=\"select-type\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"income\">Income</SelectItem>\n                    <SelectItem value=\"expense\">Expense</SelectItem>\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.type && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.type.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"amount\">Amount (रु.)</Label>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  {...form.register(\"amount\", { valueAsNumber: true })}\n                  data-testid=\"input-amount\"\n                />\n                {form.formState.errors.amount && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.amount.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\">Category</Label>\n                <Select \n                  value={form.watch(\"category\")} \n                  onValueChange={(value) => form.setValue(\"category\", value)}\n                  data-testid=\"select-category\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.category && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.category.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"date\">Date</Label>\n                <Input\n                  type=\"date\"\n                  {...form.register(\"date\")}\n                  data-testid=\"input-date\"\n                />\n                {form.formState.errors.date && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.date.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description (Optional)</Label>\n              <Textarea\n                {...form.register(\"description\")}\n                placeholder=\"Enter description...\"\n                data-testid=\"input-description\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              {onCancel && (\n                <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"button-cancel\">\n                  Cancel\n                </Button>\n              )}\n              <Button \n                type=\"submit\" \n                disabled={isSubmitting}\n                data-testid=\"button-submit\"\n              >\n                {isSubmitting ? \"Saving...\" : isEditing ? \"Update\" : \"Add Transaction\"}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":7108},"client/src/components/TransactionList.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Transaction } from \"@shared/schema\";\nimport { CATEGORY_ICONS } from \"@/lib/constants\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Edit, Trash2, TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface TransactionListProps {\n  transactions: Transaction[];\n  onEdit?: (transaction: Transaction) => void;\n  onDelete?: (id: string) => void;\n  showActions?: boolean;\n  title?: string;\n  limit?: number;\n}\n\nexport function TransactionList({\n  transactions,\n  onEdit,\n  onDelete,\n  showActions = false,\n  title = \"Transactions\",\n  limit\n}: TransactionListProps) {\n  const [deleteConfirm, setDeleteConfirm] = useState<string | null>(null);\n\n  const displayTransactions = limit ? transactions.slice(0, limit) : transactions;\n\n  const handleDelete = (id: string) => {\n    if (deleteConfirm === id) {\n      onDelete?.(id);\n      setDeleteConfirm(null);\n    } else {\n      setDeleteConfirm(id);\n      setTimeout(() => setDeleteConfirm(null), 3000);\n    }\n  };\n\n  const getIconClass = (category: string): string => {\n    return CATEGORY_ICONS[category as keyof typeof CATEGORY_ICONS] || \"fas fa-circle\";\n  };\n\n  if (displayTransactions.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle data-testid=\"text-transactions-title\">{title}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\" data-testid=\"text-no-transactions\">\n              No transactions found\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle data-testid=\"text-transactions-title\">{title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-2\">\n          <AnimatePresence mode=\"popLayout\">\n            {displayTransactions.map((transaction, index) => (\n              <motion.div\n                key={transaction.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, x: -100 }}\n                transition={{ duration: 0.2, delay: index * 0.05 }}\n                className=\"transaction-item flex items-center justify-between p-4 rounded-lg border border-border hover:bg-muted transition-colors duration-200\"\n                data-testid={`transaction-item-${transaction.id}`}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div\n                    className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                      transaction.type === \"income\"\n                        ? \"bg-green-100 text-green-600\"\n                        : \"bg-red-100 text-red-600\"\n                    }`}\n                  >\n                    {transaction.type === \"income\" ? (\n                      <TrendingUp className=\"h-5 w-5\" />\n                    ) : (\n                      <TrendingDown className=\"h-5 w-5\" />\n                    )}\n                  </div>\n                  <div className=\"min-w-0\">\n                    <div className=\"flex items-center space-x-2\">\n                      <p className=\"font-medium text-foreground truncate\" data-testid={`text-category-${transaction.id}`}>\n                        {transaction.category}\n                      </p>\n                      <Badge \n                        variant={transaction.type === \"income\" ? \"default\" : \"secondary\"}\n                        data-testid={`badge-type-${transaction.id}`}\n                      >\n                        {transaction.type}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground truncate\" data-testid={`text-description-${transaction.id}`}>\n                      {transaction.description || \"No description\"}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\" data-testid={`text-date-${transaction.id}`}>\n                      {transaction.bsDate} • {new Date(transaction.date).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <span\n                    className={`font-semibold text-lg ${\n                      transaction.type === \"income\" ? \"text-green-600\" : \"text-red-600\"\n                    }`}\n                    data-testid={`text-amount-${transaction.id}`}\n                  >\n                    {transaction.type === \"income\" ? \"+\" : \"-\"}रु. {transaction.amount.toLocaleString()}\n                  </span>\n\n                  {showActions && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => onEdit?.(transaction)}\n                        data-testid={`button-edit-${transaction.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        className={\n                          deleteConfirm === transaction.id\n                            ? \"text-destructive hover:text-destructive\"\n                            : \"\"\n                        }\n                        onClick={() => handleDelete(transaction.id)}\n                        data-testid={`button-delete-${transaction.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                        {deleteConfirm === transaction.id && (\n                          <span className=\"ml-1 text-xs\">Confirm?</span>\n                        )}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </motion.div>\n            ))}\n          </AnimatePresence>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6234},"client/src/context/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { User } from \"@shared/schema\";\nimport { storageService } from \"@/lib/storage\";\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<boolean>;\n  register: (userData: {\n    username: string;\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n  }) => Promise<boolean>;\n  logout: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    // Check for existing session on mount\n    const currentUser = storageService.getCurrentUser();\n    if (currentUser) {\n      setUser(currentUser);\n    }\n  }, []);\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    const success = await storageService.loginUser(email, password);\n    if (success) {\n      const currentUser = storageService.getCurrentUser();\n      setUser(currentUser);\n      return true;\n    }\n    return false;\n  };\n\n  const register = async (userData: {\n    username: string;\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n  }): Promise<boolean> => {\n    const newUser = await storageService.createUser(userData);\n    if (newUser) {\n      setUser(newUser);\n      return true;\n    }\n    return false;\n  };\n\n  const logout = () => {\n    storageService.logoutUser();\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        login,\n        register,\n        logout,\n        isAuthenticated: !!user,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2011},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { useAuth as useAuthContext } from \"@/context/AuthContext\";\n\nexport const useAuth = useAuthContext;\n","size_bytes":107},"client/src/hooks/useLocalStorage.tsx":{"content":"import { useState, useEffect } from \"react\";\n\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n}\n","size_bytes":826},"client/src/lib/api.ts":{"content":"import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5001/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle token expiration\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API calls\nexport const authAPI = {\n  login: async (email: string, password: string) => {\n    const response = await api.post('/auth/login', { email, password });\n    return response.data;\n  },\n  \n  register: async (userData: {\n    username: string;\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n  }) => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  \n  getMe: async () => {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n};\n\n// Transaction API calls\nexport const transactionAPI = {\n  getAll: async () => {\n    const response = await api.get('/transactions');\n    return response.data;\n  },\n  \n  create: async (transactionData: {\n    type: 'income' | 'expense';\n    amount: number;\n    category: string;\n    description?: string;\n    date: string;\n    bsDate: string;\n  }) => {\n    const response = await api.post('/transactions', transactionData);\n    return response.data;\n  },\n  \n  update: async (id: string, transactionData: any) => {\n    const response = await api.put(`/transactions/${id}`, transactionData);\n    return response.data;\n  },\n  \n  delete: async (id: string) => {\n    const response = await api.delete(`/transactions/${id}`);\n    return response.data;\n  },\n  \n  getStats: async () => {\n    const response = await api.get('/transactions/stats');\n    return response.data;\n  },\n};\n\nexport default api;","size_bytes":2199},"client/src/lib/constants.ts":{"content":"import { incomeCategories, expenseCategories } from \"@shared/schema\";\n\nexport const INCOME_CATEGORIES = incomeCategories;\nexport const EXPENSE_CATEGORIES = expenseCategories;\n\nexport const CATEGORY_ICONS = {\n  // Income category icons\n  \"Salary\": \"fas fa-briefcase\",\n  \"Freelance\": \"fas fa-laptop\",\n  \"Business\": \"fas fa-building\",\n  \"Investment\": \"fas fa-chart-line\",\n  \"Rental\": \"fas fa-home\",\n  \"Gift\": \"fas fa-gift\",\n  \"Bonus\": \"fas fa-star\",\n  \"Pension\": \"fas fa-user-clock\",\n  \"Other\": \"fas fa-plus-circle\",\n\n  // Expense category icons\n  \"Food & Dining\": \"fas fa-utensils\",\n  \"Transportation\": \"fas fa-car\",\n  \"Education\": \"fas fa-graduation-cap\",\n  \"Shopping\": \"fas fa-shopping-bag\",\n  \"Entertainment\": \"fas fa-film\",\n  \"Bills & Utilities\": \"fas fa-bolt\",\n  \"Healthcare\": \"fas fa-heartbeat\",\n  \"Travel\": \"fas fa-plane\",\n} as const;\n\nexport const STORAGE_KEYS = {\n  USERS: \"expense_tracker_users\",\n  TRANSACTIONS: \"expense_tracker_transactions\",\n  CURRENT_USER: \"expense_tracker_current_user\",\n} as const;\n","size_bytes":1013},"client/src/lib/date-utils.ts":{"content":"// Simple Bikram Sambat date utilities\n// Using basic conversion logic for demonstration\n// In production, use a proper library like 'nepali-date' or 'bstojs'\n\ninterface BSDate {\n  year: number;\n  month: number;\n  day: number;\n}\n\nconst nepaliMonths = [\n  \"बैशाख\", \"जेठ\", \"असार\", \"साउन\", \"भदौ\", \"असोज\",\n  \"कार्तिक\", \"मंसिर\", \"पौष\", \"माघ\", \"फाल्गुन\", \"चैत\"\n];\n\nconst nepaliDigits = ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९'];\n\nexport function adToBs(adDate: Date): BSDate {\n  // Simplified conversion - in production use a proper library\n  // This is a basic approximation\n  const adYear = adDate.getFullYear();\n  const adMonth = adDate.getMonth();\n  const adDay = adDate.getDate();\n  \n  // Basic conversion (approximation)\n  let bsYear = adYear + 57;\n  let bsMonth = adMonth + 9;\n  let bsDay = adDay;\n  \n  if (bsMonth > 12) {\n    bsMonth -= 12;\n    bsYear += 1;\n  }\n  \n  // Adjust for mid-year offset\n  if (adMonth < 4) {\n    bsYear -= 1;\n  }\n  \n  return { year: bsYear, month: bsMonth, day: bsDay };\n}\n\nexport function bsToAd(bsDate: BSDate): Date {\n  // Simplified conversion - in production use a proper library\n  let adYear = bsDate.year - 57;\n  let adMonth = bsDate.month - 9;\n  \n  if (adMonth < 0) {\n    adMonth += 12;\n    adYear -= 1;\n  }\n  \n  if (bsDate.month >= 9) {\n    adYear += 1;\n  }\n  \n  return new Date(adYear, adMonth, bsDate.day);\n}\n\nexport function formatBSDate(bsDate: BSDate): string {\n  const nepaliYear = convertToNepaliDigits(bsDate.year.toString());\n  const nepaliDay = convertToNepaliDigits(bsDate.day.toString());\n  const monthName = nepaliMonths[bsDate.month - 1];\n  \n  return `${nepaliYear} साल ${monthName} ${nepaliDay} गते`;\n}\n\nexport function convertToNepaliDigits(englishNumber: string): string {\n  return englishNumber.split('').map(digit => nepaliDigits[parseInt(digit)] || digit).join('');\n}\n\nexport function getCurrentBSDate(): BSDate {\n  return adToBs(new Date());\n}\n\nexport function getCurrentBSDateString(): string {\n  return formatBSDate(getCurrentBSDate());\n}\n\nexport function parseDateString(dateStr: string): Date {\n  return new Date(dateStr);\n}\n\nexport function formatDateForInput(date: Date): string {\n  return date.toISOString().split('T')[0];\n}\n","size_bytes":2333},"client/src/lib/pdf-utils.ts":{"content":"import { Transaction } from \"@shared/schema\";\n\nexport async function generateTransactionsPDF(transactions: Transaction[], userStats: any) {\n  // Using jsPDF for PDF generation\n  const { jsPDF } = await import('jspdf');\n  \n  const doc = new jsPDF();\n  \n  // Set font\n  doc.setFontSize(20);\n  doc.text('Transaction Report', 20, 20);\n  \n  // Add date\n  doc.setFontSize(12);\n  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 35);\n  \n  // Add summary\n  doc.setFontSize(14);\n  doc.text('Summary', 20, 50);\n  doc.setFontSize(10);\n  doc.text(`Total Income: रु. ${userStats.totalIncome.toLocaleString()}`, 20, 60);\n  doc.text(`Total Expenses: रु. ${userStats.totalExpenses.toLocaleString()}`, 20, 70);\n  doc.text(`Total Balance: रु. ${userStats.totalBalance.toLocaleString()}`, 20, 80);\n  doc.text(`Total Transactions: ${userStats.totalTransactions}`, 20, 90);\n  \n  // Add transactions table\n  doc.setFontSize(14);\n  doc.text('Transactions', 20, 110);\n  \n  let yPosition = 125;\n  doc.setFontSize(8);\n  \n  // Table headers\n  doc.text('Date', 20, yPosition);\n  doc.text('Type', 50, yPosition);\n  doc.text('Category', 80, yPosition);\n  doc.text('Description', 120, yPosition);\n  doc.text('Amount', 170, yPosition);\n  \n  yPosition += 10;\n  \n  // Sort transactions by date (newest first)\n  const sortedTransactions = [...transactions].sort(\n    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\n  );\n  \n  sortedTransactions.forEach((transaction, index) => {\n    if (yPosition > 280) { // Start new page if needed\n      doc.addPage();\n      yPosition = 20;\n    }\n    \n    const date = new Date(transaction.date).toLocaleDateString();\n    const type = transaction.type === 'income' ? 'Income' : 'Expense';\n    const category = transaction.category;\n    const description = transaction.description || '-';\n    const amount = `रु. ${transaction.amount.toLocaleString()}`;\n    \n    doc.text(date, 20, yPosition);\n    doc.text(type, 50, yPosition);\n    doc.text(category.substring(0, 15), 80, yPosition);\n    doc.text(description.substring(0, 20), 120, yPosition);\n    doc.text(amount, 170, yPosition);\n    \n    yPosition += 8;\n  });\n  \n  return doc;\n}\n\nexport function downloadPDF(doc: any, filename: string = 'transactions.pdf') {\n  doc.save(filename);\n}\n","size_bytes":2286},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/storage.ts":{"content":"import { User, Transaction, InsertUser, InsertTransaction } from \"@shared/schema\";\nimport { STORAGE_KEYS } from \"./constants\";\nimport { adToBs, formatBSDate } from \"./date-utils\";\n\nclass StorageService {\n  private getFromStorage<T>(key: string, defaultValue: T): T {\n    try {\n      const item = localStorage.getItem(key);\n      return item ? JSON.parse(item) : defaultValue;\n    } catch (error) {\n      console.error(`Error reading from localStorage: ${key}`, error);\n      return defaultValue;\n    }\n  }\n\n  private setToStorage<T>(key: string, value: T): void {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(`Error writing to localStorage: ${key}`, error);\n    }\n  }\n\n  // User management\n  getUsers(): User[] {\n    return this.getFromStorage(STORAGE_KEYS.USERS, []);\n  }\n\n  getCurrentUser(): User | null {\n    return this.getFromStorage(STORAGE_KEYS.CURRENT_USER, null);\n  }\n\n  async createUser(userData: InsertUser): Promise<User | null> {\n    try {\n      const users = this.getUsers();\n      \n      // Check if user already exists\n      if (users.some(user => user.email === userData.email || user.username === userData.username)) {\n        return null;\n      }\n\n      const newUser: User = {\n        id: crypto.randomUUID(),\n        ...userData,\n        createdAt: new Date().toISOString(),\n      };\n\n      users.push(newUser);\n      this.setToStorage(STORAGE_KEYS.USERS, users);\n      this.setToStorage(STORAGE_KEYS.CURRENT_USER, newUser);\n      \n      return newUser;\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      return null;\n    }\n  }\n\n  async loginUser(email: string, password: string): Promise<boolean> {\n    try {\n      const users = this.getUsers();\n      const user = users.find(u => u.email === email && u.password === password);\n      \n      if (user) {\n        this.setToStorage(STORAGE_KEYS.CURRENT_USER, user);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"Error logging in user:\", error);\n      return false;\n    }\n  }\n\n  logoutUser(): void {\n    localStorage.removeItem(STORAGE_KEYS.CURRENT_USER);\n  }\n\n  // Transaction management\n  getTransactions(): Transaction[] {\n    return this.getFromStorage(STORAGE_KEYS.TRANSACTIONS, []);\n  }\n\n  getUserTransactions(userId: string): Transaction[] {\n    return this.getTransactions().filter(transaction => transaction.userId === userId);\n  }\n\n  async createTransaction(transactionData: InsertTransaction): Promise<Transaction | null> {\n    try {\n      const currentUser = this.getCurrentUser();\n      if (!currentUser) return null;\n\n      const transactions = this.getTransactions();\n      const date = new Date(transactionData.date);\n      const bsDate = adToBs(date);\n      \n      const newTransaction: Transaction = {\n        id: crypto.randomUUID(),\n        userId: currentUser.id,\n        ...transactionData,\n        bsDate: formatBSDate(bsDate),\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n\n      transactions.push(newTransaction);\n      this.setToStorage(STORAGE_KEYS.TRANSACTIONS, transactions);\n      \n      return newTransaction;\n    } catch (error) {\n      console.error(\"Error creating transaction:\", error);\n      return null;\n    }\n  }\n\n  async updateTransaction(id: string, updates: Partial<InsertTransaction>): Promise<Transaction | null> {\n    try {\n      const transactions = this.getTransactions();\n      const index = transactions.findIndex(t => t.id === id);\n      \n      if (index === -1) return null;\n\n      const updatedTransaction = {\n        ...transactions[index],\n        ...updates,\n        updatedAt: new Date().toISOString(),\n      };\n\n      if (updates.date) {\n        const date = new Date(updates.date);\n        const bsDate = adToBs(date);\n        updatedTransaction.bsDate = formatBSDate(bsDate);\n      }\n\n      transactions[index] = updatedTransaction;\n      this.setToStorage(STORAGE_KEYS.TRANSACTIONS, transactions);\n      \n      return updatedTransaction;\n    } catch (error) {\n      console.error(\"Error updating transaction:\", error);\n      return null;\n    }\n  }\n\n  async deleteTransaction(id: string): Promise<boolean> {\n    try {\n      const transactions = this.getTransactions();\n      const filteredTransactions = transactions.filter(t => t.id !== id);\n      \n      if (filteredTransactions.length === transactions.length) {\n        return false; // Transaction not found\n      }\n\n      this.setToStorage(STORAGE_KEYS.TRANSACTIONS, filteredTransactions);\n      return true;\n    } catch (error) {\n      console.error(\"Error deleting transaction:\", error);\n      return false;\n    }\n  }\n\n  // Analytics\n  getUserStats(userId: string) {\n    const transactions = this.getUserTransactions(userId);\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getFullYear();\n\n    const totalIncome = transactions\n      .filter(t => t.type === \"income\")\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const totalExpenses = transactions\n      .filter(t => t.type === \"expense\")\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const thisMonthIncome = transactions\n      .filter(t => {\n        const tDate = new Date(t.date);\n        return t.type === \"income\" && \n               tDate.getMonth() === currentMonth && \n               tDate.getFullYear() === currentYear;\n      })\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const thisMonthExpenses = transactions\n      .filter(t => {\n        const tDate = new Date(t.date);\n        return t.type === \"expense\" && \n               tDate.getMonth() === currentMonth && \n               tDate.getFullYear() === currentYear;\n      })\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    return {\n      totalBalance: totalIncome - totalExpenses,\n      totalIncome,\n      totalExpenses,\n      thisMonthIncome,\n      thisMonthExpenses,\n      totalTransactions: transactions.length,\n      recentTransactions: transactions\n        .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n        .slice(0, 10),\n    };\n  }\n}\n\nexport const storageService = new StorageService();\n","size_bytes":6210},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { storageService } from \"@/lib/storage\";\nimport { getCurrentBSDateString } from \"@/lib/date-utils\";\nimport { StatCard } from \"@/components/StatCard\";\nimport { TransactionList } from \"@/components/TransactionList\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Wallet, \n  TrendingUp, \n  TrendingDown, \n  List, \n  Plus, \n  Minus, \n  BarChart3, \n  Download \n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [stats, setStats] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      const userStats = storageService.getUserStats(user.id);\n      setStats(userStats);\n      setIsLoading(false);\n    }\n  }, [user]);\n\n  if (isLoading || !stats) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"text-lg text-muted-foreground\">Loading dashboard...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <motion.header\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"bg-card border-b border-border px-6 py-4\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-dashboard-title\">\n              Dashboard\n            </h2>\n            <p className=\"text-muted-foreground\">Welcome back! Here's your financial overview</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-sm text-muted-foreground\" data-testid=\"text-current-date\">\n              {getCurrentBSDateString()}\n            </div>\n            {user && (\n              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                <span className=\"text-primary-foreground text-sm font-medium\" data-testid=\"text-user-initials\">\n                  {user.firstName[0]}{user.lastName[0]}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatCard\n            title=\"Total Balance\"\n            value={`रु. ${stats.totalBalance.toLocaleString()}`}\n            change=\"+12.5%\"\n            changeType=\"positive\"\n            icon={Wallet}\n            testId=\"stat-total-balance\"\n          />\n          \n          <StatCard\n            title=\"Total Income\"\n            value={`रु. ${stats.totalIncome.toLocaleString()}`}\n            change=\"+8.2%\"\n            changeType=\"positive\"\n            icon={TrendingUp}\n            iconBgColor=\"bg-green-100\"\n            iconColor=\"text-green-600\"\n            testId=\"stat-total-income\"\n          />\n          \n          <StatCard\n            title=\"Total Expenses\"\n            value={`रु. ${stats.totalExpenses.toLocaleString()}`}\n            change=\"-3.1%\"\n            changeType=\"positive\"\n            icon={TrendingDown}\n            iconBgColor=\"bg-red-100\"\n            iconColor=\"text-red-600\"\n            testId=\"stat-total-expenses\"\n          />\n          \n          <StatCard\n            title=\"Transactions\"\n            value={stats.totalTransactions.toString()}\n            change=\"+15\"\n            changeType=\"positive\"\n            icon={List}\n            iconBgColor=\"bg-blue-100\"\n            iconColor=\"text-blue-600\"\n            testId=\"stat-total-transactions\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Charts Section */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Monthly Overview */}\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.1 }}\n            >\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle data-testid=\"text-monthly-overview-title\">Monthly Overview</CardTitle>\n                    <Select defaultValue=\"kartik-2081\">\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"kartik-2081\">कार्तिक २०८१</SelectItem>\n                        <SelectItem value=\"asoj-2081\">असोज २०८१</SelectItem>\n                        <SelectItem value=\"bhadra-2081\">भदौ २०८१</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                    <div className=\"text-center\">\n                      <BarChart3 className=\"h-12 w-12 mx-auto mb-2 text-muted-foreground/50\" />\n                      <p>Charts will be displayed here</p>\n                      <p className=\"text-sm\">This Month: रु. {stats.thisMonthIncome.toLocaleString()} income, रु. {stats.thisMonthExpenses.toLocaleString()} expenses</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Category Breakdown */}\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.2 }}\n            >\n              <Card>\n                <CardHeader>\n                  <CardTitle data-testid=\"text-category-breakdown-title\">Expense Categories</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                    <div className=\"text-center\">\n                      <BarChart3 className=\"h-12 w-12 mx-auto mb-2 text-muted-foreground/50\" />\n                      <p>Category breakdown chart will be displayed here</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n\n          {/* Recent Transactions */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3, delay: 0.3 }}\n          >\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle data-testid=\"text-recent-transactions-title\">Recent Transactions</CardTitle>\n                  <Link href=\"/transactions\" data-testid=\"link-view-all-transactions\">\n                    <Button variant=\"ghost\" size=\"sm\">\n                      View All\n                    </Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {stats.recentTransactions.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {stats.recentTransactions.slice(0, 5).map((transaction: any) => (\n                      <div\n                        key={transaction.id}\n                        className=\"flex items-center justify-between p-3 rounded-lg hover:bg-muted transition-colors duration-200\"\n                        data-testid={`recent-transaction-${transaction.id}`}\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <div\n                            className={`w-8 h-8 rounded-lg flex items-center justify-center ${\n                              transaction.type === \"income\"\n                                ? \"bg-green-100 text-green-600\"\n                                : \"bg-red-100 text-red-600\"\n                            }`}\n                          >\n                            {transaction.type === \"income\" ? (\n                              <TrendingUp className=\"h-4 w-4\" />\n                            ) : (\n                              <TrendingDown className=\"h-4 w-4\" />\n                            )}\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium text-foreground\">{transaction.category}</p>\n                            <p className=\"text-xs text-muted-foreground\">{transaction.bsDate}</p>\n                          </div>\n                        </div>\n                        <span\n                          className={`text-sm font-semibold ${\n                            transaction.type === \"income\" ? \"text-green-600\" : \"text-red-600\"\n                          }`}\n                        >\n                          {transaction.type === \"income\" ? \"+\" : \"-\"}रु. {transaction.amount.toLocaleString()}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <p>No transactions yet</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n\n        {/* Quick Actions */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.4 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-quick-actions-title\">Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <Link href=\"/income\" data-testid=\"link-add-income\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full h-16 flex items-center space-x-3 bg-green-50 hover:bg-green-100 border-green-200 text-green-700\"\n                  >\n                    <Plus className=\"h-5 w-5\" />\n                    <span className=\"font-medium\">Add Income</span>\n                  </Button>\n                </Link>\n\n                <Link href=\"/expenses\" data-testid=\"link-add-expense\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full h-16 flex items-center space-x-3 bg-red-50 hover:bg-red-100 border-red-200 text-red-700\"\n                  >\n                    <Minus className=\"h-5 w-5\" />\n                    <span className=\"font-medium\">Add Expense</span>\n                  </Button>\n                </Link>\n\n                <Link href=\"/transactions\" data-testid=\"link-view-report\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full h-16 flex items-center space-x-3 bg-blue-50 hover:bg-blue-100 border-blue-200 text-blue-700\"\n                  >\n                    <BarChart3 className=\"h-5 w-5\" />\n                    <span className=\"font-medium\">View Report</span>\n                  </Button>\n                </Link>\n\n                <Link href=\"/export-pdf\" data-testid=\"link-export-pdf\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full h-16 flex items-center space-x-3 bg-purple-50 hover:bg-purple-100 border-purple-200 text-purple-700\"\n                  >\n                    <Download className=\"h-5 w-5\" />\n                    <span className=\"font-medium\">Export PDF</span>\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12274},"client/src/pages/Expenses.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { storageService } from \"@/lib/storage\";\nimport { TransactionForm } from \"@/components/TransactionForm\";\nimport { TransactionList } from \"@/components/TransactionList\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus } from \"lucide-react\";\nimport { Transaction, InsertTransaction } from \"@shared/schema\";\n\nexport default function Expenses() {\n  const { user } = useAuth();\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [editingTransaction, setEditingTransaction] = useState<Transaction | null>(null);\n  const [showForm, setShowForm] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      loadTransactions();\n    }\n  }, [user]);\n\n  const loadTransactions = () => {\n    if (user) {\n      const userTransactions = storageService.getUserTransactions(user.id);\n      const expenseTransactions = userTransactions.filter(t => t.type === \"expense\");\n      setTransactions(expenseTransactions.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()));\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = async (data: InsertTransaction) => {\n    if (editingTransaction) {\n      await storageService.updateTransaction(editingTransaction.id, data);\n      setEditingTransaction(null);\n    } else {\n      await storageService.createTransaction({ ...data, type: \"expense\" });\n    }\n    loadTransactions();\n    setShowForm(false);\n  };\n\n  const handleEdit = (transaction: Transaction) => {\n    setEditingTransaction(transaction);\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    await storageService.deleteTransaction(id);\n    loadTransactions();\n  };\n\n  const handleCancel = () => {\n    setEditingTransaction(null);\n    setShowForm(false);\n  };\n\n  const totalExpenses = transactions.reduce((sum, t) => sum + t.amount, 0);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"text-lg text-muted-foreground\">Loading expense data...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <motion.header\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"bg-card border-b border-border px-6 py-4\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-expenses-title\">\n              Expense Management\n            </h2>\n            <p className=\"text-muted-foreground\">Track and categorize all your expenses</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-right\">\n              <div className=\"text-sm text-muted-foreground\">Total Expenses</div>\n              <div className=\"text-2xl font-bold text-red-600\" data-testid=\"text-total-expenses\">\n                रु. {totalExpenses.toLocaleString()}\n              </div>\n            </div>\n            <Button \n              onClick={() => setShowForm(!showForm)}\n              data-testid=\"button-add-expense\"\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Expense\n            </Button>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Add/Edit Form */}\n        {showForm && (\n          <motion.div\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <TransactionForm\n              transaction={editingTransaction}\n              onSubmit={handleSubmit}\n              onCancel={handleCancel}\n              isEditing={!!editingTransaction}\n            />\n          </motion.div>\n        )}\n\n        {/* Expense Summary */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.1 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-expense-summary-title\">Expense Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-red-600\" data-testid=\"text-total-amount\">\n                    रु. {totalExpenses.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-red-700\">Total Amount</div>\n                </div>\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-total-count\">\n                    {transactions.length}\n                  </div>\n                  <div className=\"text-sm text-blue-700\">Total Entries</div>\n                </div>\n                <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"text-average-amount\">\n                    रु. {transactions.length > 0 ? Math.round(totalExpenses / transactions.length).toLocaleString() : 0}\n                  </div>\n                  <div className=\"text-sm text-purple-700\">Average Amount</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Expense Categories Overview */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.15 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-category-overview-title\">Category Overview</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {Object.entries(\n                  transactions.reduce((acc, transaction) => {\n                    acc[transaction.category] = (acc[transaction.category] || 0) + transaction.amount;\n                    return acc;\n                  }, {} as Record<string, number>)\n                ).map(([category, amount]) => (\n                  <div key={category} className=\"p-3 bg-muted rounded-lg\" data-testid={`category-${category.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase()}`}>\n                    <div className=\"text-sm font-medium text-foreground\">{category}</div>\n                    <div className=\"text-lg font-bold text-red-600\">रु. {amount.toLocaleString()}</div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Expense List */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.2 }}\n        >\n          <TransactionList\n            transactions={transactions}\n            onEdit={handleEdit}\n            onDelete={handleDelete}\n            showActions={true}\n            title=\"Expense Transactions\"\n          />\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7651},"client/src/pages/ExportPDF.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { storageService } from \"@/lib/storage\";\nimport { generateTransactionsPDF, downloadPDF } from \"@/lib/pdf-utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Download, \n  FileText, \n  Calendar, \n  Filter,\n  TrendingUp,\n  TrendingDown,\n  BarChart3\n} from \"lucide-react\";\nimport { Transaction } from \"@shared/schema\";\n\nexport default function ExportPDF() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [filteredTransactions, setFilteredTransactions] = useState<Transaction[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isExporting, setIsExporting] = useState(false);\n  \n  // Filter states\n  const [dateFrom, setDateFrom] = useState(\"\");\n  const [dateTo, setDateTo] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<\"all\" | \"income\" | \"expense\">(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"all\");\n  const [includeIncome, setIncludeIncome] = useState(true);\n  const [includeExpenses, setIncludeExpenses] = useState(true);\n  const [includeSummary, setIncludeSummary] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      loadTransactions();\n    }\n  }, [user]);\n\n  useEffect(() => {\n    filterTransactions();\n  }, [transactions, dateFrom, dateTo, typeFilter, categoryFilter, includeIncome, includeExpenses]);\n\n  const loadTransactions = () => {\n    if (user) {\n      const userTransactions = storageService.getUserTransactions(user.id);\n      setTransactions(userTransactions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()));\n      setIsLoading(false);\n    }\n  };\n\n  const filterTransactions = () => {\n    let filtered = [...transactions];\n\n    // Filter by date range\n    if (dateFrom) {\n      filtered = filtered.filter(t => new Date(t.date) >= new Date(dateFrom));\n    }\n    if (dateTo) {\n      filtered = filtered.filter(t => new Date(t.date) <= new Date(dateTo));\n    }\n\n    // Filter by type\n    if (typeFilter !== \"all\") {\n      filtered = filtered.filter(t => t.type === typeFilter);\n    }\n\n    // Filter by category\n    if (categoryFilter !== \"all\") {\n      filtered = filtered.filter(t => t.category === categoryFilter);\n    }\n\n    // Filter by include settings\n    if (!includeIncome) {\n      filtered = filtered.filter(t => t.type !== \"income\");\n    }\n    if (!includeExpenses) {\n      filtered = filtered.filter(t => t.type !== \"expense\");\n    }\n\n    setFilteredTransactions(filtered);\n  };\n\n  const getUniqueCategories = () => {\n    return Array.from(new Set(transactions.map(t => t.category))).sort();\n  };\n\n  const getExportStats = () => {\n    const totalIncome = filteredTransactions\n      .filter(t => t.type === \"income\")\n      .reduce((sum, t) => sum + t.amount, 0);\n    \n    const totalExpenses = filteredTransactions\n      .filter(t => t.type === \"expense\")\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    return {\n      totalIncome,\n      totalExpenses,\n      totalBalance: totalIncome - totalExpenses,\n      totalTransactions: filteredTransactions.length,\n      recentTransactions: filteredTransactions.slice(0, 10),\n    };\n  };\n\n  const handleExportPDF = async () => {\n    if (filteredTransactions.length === 0) {\n      toast({\n        title: \"No Data\",\n        description: \"No transactions to export with current filters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsExporting(true);\n    try {\n      const stats = getExportStats();\n      const doc = await generateTransactionsPDF(filteredTransactions, stats);\n      \n      const filename = `expense-report-${new Date().toISOString().split('T')[0]}.pdf`;\n      downloadPDF(doc, filename);\n      \n      toast({\n        title: \"Success\",\n        description: `PDF exported successfully with ${filteredTransactions.length} transactions`,\n      });\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to generate PDF. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const resetFilters = () => {\n    setDateFrom(\"\");\n    setDateTo(\"\");\n    setTypeFilter(\"all\");\n    setCategoryFilter(\"all\");\n    setIncludeIncome(true);\n    setIncludeExpenses(true);\n  };\n\n  const stats = getExportStats();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"text-lg text-muted-foreground\">Loading export data...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <motion.header\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"bg-card border-b border-border px-6 py-4\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-export-title\">\n              Export PDF Report\n            </h2>\n            <p className=\"text-muted-foreground\">Generate and download detailed financial reports</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              onClick={handleExportPDF}\n              disabled={isExporting || filteredTransactions.length === 0}\n              className=\"bg-purple-600 hover:bg-purple-700\"\n              data-testid=\"button-export-pdf\"\n            >\n              {isExporting ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Generating...\n                </>\n              ) : (\n                <>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export PDF\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Export Preview */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.1 }}\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card className=\"bg-gradient-to-r from-green-50 to-green-100\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <TrendingUp className=\"h-8 w-8 text-green-600\" />\n                  <div>\n                    <div className=\"text-lg font-bold text-green-600\" data-testid=\"text-export-income\">\n                      रु. {stats.totalIncome.toLocaleString()}\n                    </div>\n                    <div className=\"text-sm text-green-700\">Total Income</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-r from-red-50 to-red-100\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <TrendingDown className=\"h-8 w-8 text-red-600\" />\n                  <div>\n                    <div className=\"text-lg font-bold text-red-600\" data-testid=\"text-export-expenses\">\n                      रु. {stats.totalExpenses.toLocaleString()}\n                    </div>\n                    <div className=\"text-sm text-red-700\">Total Expenses</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-r from-blue-50 to-blue-100\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <BarChart3 className=\"h-8 w-8 text-blue-600\" />\n                  <div>\n                    <div className={`text-lg font-bold ${stats.totalBalance >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"text-export-balance\">\n                      रु. {stats.totalBalance.toLocaleString()}\n                    </div>\n                    <div className=\"text-sm text-blue-700\">Net Balance</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-r from-purple-50 to-purple-100\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <FileText className=\"h-8 w-8 text-purple-600\" />\n                  <div>\n                    <div className=\"text-lg font-bold text-purple-600\" data-testid=\"text-export-count\">\n                      {stats.totalTransactions}\n                    </div>\n                    <div className=\"text-sm text-purple-700\">Transactions</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </motion.div>\n\n        {/* Export Options */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.2 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\" data-testid=\"text-export-options-title\">\n                <Filter className=\"h-5 w-5\" />\n                <span>Export Filters & Options</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Date Range */}\n              <div>\n                <Label className=\"text-base font-medium mb-3 block\">Date Range</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dateFrom\">From Date</Label>\n                    <Input\n                      id=\"dateFrom\"\n                      type=\"date\"\n                      value={dateFrom}\n                      onChange={(e) => setDateFrom(e.target.value)}\n                      data-testid=\"input-date-from\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dateTo\">To Date</Label>\n                    <Input\n                      id=\"dateTo\"\n                      type=\"date\"\n                      value={dateTo}\n                      onChange={(e) => setDateTo(e.target.value)}\n                      data-testid=\"input-date-to\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Type and Category Filters */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Transaction Type</Label>\n                  <Select value={typeFilter} onValueChange={(value: \"all\" | \"income\" | \"expense\") => setTypeFilter(value)}>\n                    <SelectTrigger data-testid=\"select-export-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Types</SelectItem>\n                      <SelectItem value=\"income\">Income Only</SelectItem>\n                      <SelectItem value=\"expense\">Expenses Only</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Category</Label>\n                  <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                    <SelectTrigger data-testid=\"select-export-category\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Categories</SelectItem>\n                      {getUniqueCategories().map((category) => (\n                        <SelectItem key={category} value={category}>\n                          {category}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Include Options */}\n              <div>\n                <Label className=\"text-base font-medium mb-3 block\">Include in Report</Label>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"includeIncome\"\n                      checked={includeIncome}\n                      onCheckedChange={setIncludeIncome}\n                      data-testid=\"checkbox-include-income\"\n                    />\n                    <Label htmlFor=\"includeIncome\">Income Transactions</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"includeExpenses\"\n                      checked={includeExpenses}\n                      onCheckedChange={setIncludeExpenses}\n                      data-testid=\"checkbox-include-expenses\"\n                    />\n                    <Label htmlFor=\"includeExpenses\">Expense Transactions</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"includeSummary\"\n                      checked={includeSummary}\n                      onCheckedChange={setIncludeSummary}\n                      data-testid=\"checkbox-include-summary\"\n                    />\n                    <Label htmlFor=\"includeSummary\">Summary Statistics</Label>\n                  </div>\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex justify-between items-center pt-4 border-t border-border\">\n                <Button\n                  variant=\"outline\"\n                  onClick={resetFilters}\n                  data-testid=\"button-reset-filters\"\n                >\n                  Reset Filters\n                </Button>\n                <div className=\"text-sm text-muted-foreground\" data-testid=\"text-filtered-count\">\n                  {filteredTransactions.length} transactions will be exported\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Export Instructions */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.3 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-instructions-title\">Export Instructions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 text-sm text-muted-foreground\">\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-bold mt-0.5\">1</div>\n                  <p>Configure your desired filters and date range above</p>\n                </div>\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-bold mt-0.5\">2</div>\n                  <p>Review the preview statistics to ensure the data is correct</p>\n                </div>\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-bold mt-0.5\">3</div>\n                  <p>Click \"Export PDF\" to generate and download your financial report</p>\n                </div>\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"w-5 h-5 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-bold mt-0.5\">4</div>\n                  <p>The PDF will include transaction details, Bikram Sambat dates, and summary statistics</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16809},"client/src/pages/Home.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  BarChart3, \n  TrendingUp, \n  TrendingDown, \n  Shield, \n  Smartphone, \n  Download,\n  ArrowRight,\n  CheckCircle\n} from \"lucide-react\";\n\nconst features = [\n  {\n    icon: BarChart3,\n    title: \"Dashboard Analytics\",\n    description: \"Get detailed insights into your income and expenses with beautiful charts and analytics.\"\n  },\n  {\n    icon: TrendingUp,\n    title: \"Income Tracking\",\n    description: \"Track all your income sources including salary, freelance, business, and investments.\"\n  },\n  {\n    icon: TrendingDown,\n    title: \"Expense Management\",\n    description: \"Categorize and monitor your expenses across different categories like food, transport, and bills.\"\n  },\n  {\n    icon: Shield,\n    title: \"Secure & Private\",\n    description: \"Your financial data is stored locally and remains completely private and secure.\"\n  },\n  {\n    icon: Smartphone,\n    title: \"Responsive Design\",\n    description: \"Access your expense tracker from any device with our responsive web design.\"\n  },\n  {\n    icon: Download,\n    title: \"PDF Export\",\n    description: \"Export your transaction reports and financial summaries as PDF documents.\"\n  }\n];\n\nconst benefits = [\n  \"Bikram Sambat date system support\",\n  \"Real-time financial calculations\", \n  \"Categorized transaction management\",\n  \"Visual data representation with charts\",\n  \"Monthly and yearly financial insights\",\n  \"Offline functionality with local storage\"\n];\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden bg-gradient-to-br from-primary/5 via-background to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"text-center\">\n            <motion.h1\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\"\n              data-testid=\"text-hero-title\"\n            >\n              Track Your Finances with\n              <span className=\"text-primary block\">ExpenseTracker</span>\n            </motion.h1>\n            \n            <motion.p\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\"\n              data-testid=\"text-hero-description\"\n            >\n              A modern, intuitive expense tracker built for Nepal with Bikram Sambat date support. \n              Take control of your finances with powerful analytics and beautiful insights.\n            </motion.p>\n            \n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.4 }}\n              className=\"flex flex-col sm:flex-row gap-4 justify-center\"\n            >\n              <Link href=\"/signup\" data-testid=\"link-get-started\">\n                <Button size=\"lg\" className=\"text-lg px-8 py-3\">\n                  Get Started Free\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n              <Link href=\"/login\" data-testid=\"link-sign-in\">\n                <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-3\">\n                  Sign In\n                </Button>\n              </Link>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-16\"\n          >\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\" data-testid=\"text-features-title\">\n              Powerful Features for Complete Financial Control\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Everything you need to manage your finances effectively and make informed decisions.\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <motion.div\n                key={feature.title}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                viewport={{ once: true }}\n                whileHover={{ y: -5 }}\n              >\n                <Card className=\"h-full hover:shadow-lg transition-shadow duration-300\" data-testid={`card-feature-${index}`}>\n                  <CardHeader>\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                      <feature.icon className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <CardTitle className=\"text-xl\">{feature.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-muted-foreground\">{feature.description}</p>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <motion.div\n              initial={{ opacity: 0, x: -30 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              viewport={{ once: true }}\n            >\n              <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-6\" data-testid=\"text-benefits-title\">\n                Why Choose ExpenseTracker?\n              </h2>\n              <p className=\"text-xl text-muted-foreground mb-8\">\n                Built specifically for Nepali users with features that matter most for personal finance management.\n              </p>\n              \n              <div className=\"space-y-4\">\n                {benefits.map((benefit, index) => (\n                  <motion.div\n                    key={benefit}\n                    initial={{ opacity: 0, x: -20 }}\n                    whileInView={{ opacity: 1, x: 0 }}\n                    transition={{ duration: 0.4, delay: index * 0.1 }}\n                    viewport={{ once: true }}\n                    className=\"flex items-center space-x-3\"\n                    data-testid={`benefit-item-${index}`}\n                  >\n                    <CheckCircle className=\"h-5 w-5 text-primary flex-shrink-0\" />\n                    <span className=\"text-foreground\">{benefit}</span>\n                  </motion.div>\n                ))}\n              </div>\n            </motion.div>\n\n            <motion.div\n              initial={{ opacity: 0, x: 30 }}\n              whileInView={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              viewport={{ once: true }}\n              className=\"relative\"\n            >\n              <Card className=\"p-8 bg-gradient-to-br from-primary/5 to-accent/5\">\n                <CardContent className=\"space-y-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-4xl font-bold text-primary mb-2\">रु. 2,45,000</div>\n                    <div className=\"text-muted-foreground\">Current Balance</div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                      <div className=\"text-2xl font-semibold text-green-600\">रु. 3,50,000</div>\n                      <div className=\"text-sm text-green-700\">Total Income</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n                      <div className=\"text-2xl font-semibold text-red-600\">रु. 1,05,000</div>\n                      <div className=\"text-sm text-red-700\">Total Expenses</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-center text-sm text-muted-foreground\">\n                    २०८१ साल कार्तिक १५ गते\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-primary\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-3xl md:text-4xl font-bold text-primary-foreground mb-6\" data-testid=\"text-cta-title\">\n              Ready to Take Control of Your Finances?\n            </h2>\n            <p className=\"text-xl text-primary-foreground/90 mb-8\">\n              Join thousands of users who are already managing their finances better with ExpenseTracker.\n            </p>\n            <Link href=\"/signup\" data-testid=\"link-cta-signup\">\n              <Button \n                size=\"lg\" \n                variant=\"secondary\" \n                className=\"text-lg px-8 py-3 bg-primary-foreground text-primary hover:bg-primary-foreground/90\"\n              >\n                Start Tracking Now\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </Link>\n          </motion.div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":10248},"client/src/pages/Income.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { storageService } from \"@/lib/storage\";\nimport { TransactionForm } from \"@/components/TransactionForm\";\nimport { TransactionList } from \"@/components/TransactionList\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus } from \"lucide-react\";\nimport { Transaction, InsertTransaction } from \"@shared/schema\";\n\nexport default function Income() {\n  const { user } = useAuth();\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [editingTransaction, setEditingTransaction] = useState<Transaction | null>(null);\n  const [showForm, setShowForm] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      loadTransactions();\n    }\n  }, [user]);\n\n  const loadTransactions = () => {\n    if (user) {\n      const userTransactions = storageService.getUserTransactions(user.id);\n      const incomeTransactions = userTransactions.filter(t => t.type === \"income\");\n      setTransactions(incomeTransactions.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()));\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = async (data: InsertTransaction) => {\n    if (editingTransaction) {\n      await storageService.updateTransaction(editingTransaction.id, data);\n      setEditingTransaction(null);\n    } else {\n      await storageService.createTransaction({ ...data, type: \"income\" });\n    }\n    loadTransactions();\n    setShowForm(false);\n  };\n\n  const handleEdit = (transaction: Transaction) => {\n    setEditingTransaction(transaction);\n    setShowForm(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    await storageService.deleteTransaction(id);\n    loadTransactions();\n  };\n\n  const handleCancel = () => {\n    setEditingTransaction(null);\n    setShowForm(false);\n  };\n\n  const totalIncome = transactions.reduce((sum, t) => sum + t.amount, 0);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"text-lg text-muted-foreground\">Loading income data...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <motion.header\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"bg-card border-b border-border px-6 py-4\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-income-title\">\n              Income Management\n            </h2>\n            <p className=\"text-muted-foreground\">Track and manage all your income sources</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-right\">\n              <div className=\"text-sm text-muted-foreground\">Total Income</div>\n              <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-total-income\">\n                रु. {totalIncome.toLocaleString()}\n              </div>\n            </div>\n            <Button \n              onClick={() => setShowForm(!showForm)}\n              data-testid=\"button-add-income\"\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Income\n            </Button>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Add/Edit Form */}\n        {showForm && (\n          <motion.div\n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <TransactionForm\n              transaction={editingTransaction}\n              onSubmit={handleSubmit}\n              onCancel={handleCancel}\n              isEditing={!!editingTransaction}\n            />\n          </motion.div>\n        )}\n\n        {/* Income Summary */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.1 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-income-summary-title\">Income Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-total-amount\">\n                    रु. {totalIncome.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-green-700\">Total Amount</div>\n                </div>\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-total-count\">\n                    {transactions.length}\n                  </div>\n                  <div className=\"text-sm text-blue-700\">Total Entries</div>\n                </div>\n                <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"text-average-amount\">\n                    रु. {transactions.length > 0 ? Math.round(totalIncome / transactions.length).toLocaleString() : 0}\n                  </div>\n                  <div className=\"text-sm text-purple-700\">Average Amount</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Income List */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.2 }}\n        >\n          <TransactionList\n            transactions={transactions}\n            onEdit={handleEdit}\n            onDelete={handleDelete}\n            showActions={true}\n            title=\"Income Transactions\"\n          />\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6331},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff, LogIn, Wallet } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation(\"/dashboard\");\n    return null;\n  }\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    try {\n      const success = await login(data.email, data.password);\n      if (success) {\n        toast({\n          title: \"Welcome back!\",\n          description: \"You have been logged in successfully.\",\n        });\n        setLocation(\"/dashboard\");\n      } else {\n        toast({\n          title: \"Login Failed\",\n          description: \"Invalid email or password. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-background to-accent/5 p-4\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.4 }}\n        className=\"w-full max-w-md\"\n      >\n        <Card className=\"shadow-lg\">\n          <CardHeader className=\"text-center pb-6\">\n            <motion.div\n              initial={{ scale: 0.8 }}\n              animate={{ scale: 1 }}\n              transition={{ duration: 0.3, delay: 0.1 }}\n              className=\"flex justify-center mb-4\"\n            >\n              <div className=\"w-12 h-12 bg-primary rounded-xl flex items-center justify-center\">\n                <Wallet className=\"h-6 w-6 text-primary-foreground\" />\n              </div>\n            </motion.div>\n            <CardTitle className=\"text-2xl font-bold text-foreground\" data-testid=\"text-login-title\">\n              Welcome Back\n            </CardTitle>\n            <p className=\"text-muted-foreground\">\n              Sign in to your ExpenseTracker account\n            </p>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  {...form.register(\"email\")}\n                  className={form.formState.errors.email ? \"border-destructive\" : \"\"}\n                  data-testid=\"input-email\"\n                />\n                {form.formState.errors.email && (\n                  <p className=\"text-sm text-destructive\" data-testid=\"error-email\">\n                    {form.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Enter your password\"\n                    {...form.register(\"password\")}\n                    className={form.formState.errors.password ? \"border-destructive\" : \"\"}\n                    data-testid=\"input-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n                {form.formState.errors.password && (\n                  <p className=\"text-sm text-destructive\" data-testid=\"error-password\">\n                    {form.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Signing in...\n                  </>\n                ) : (\n                  <>\n                    <LogIn className=\"h-4 w-4 mr-2\" />\n                    Sign In\n                  </>\n                )}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Don't have an account?{\" \"}\n                <Link href=\"/signup\" data-testid=\"link-signup\">\n                  <span className=\"text-primary hover:text-primary/80 font-medium cursor-pointer\">\n                    Sign up here\n                  </span>\n                </Link>\n              </p>\n            </div>\n\n            <div className=\"mt-4 text-center\">\n              <Link href=\"/\" data-testid=\"link-home\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  ← Back to Home\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Demo Credentials Info */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.4, delay: 0.3 }}\n          className=\"mt-6\"\n        >\n          <Card className=\"bg-muted/50\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center text-sm text-muted-foreground\">\n                <p className=\"font-medium mb-2\">First time using ExpenseTracker?</p>\n                <p>Create a new account to get started with tracking your finances.</p>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":7535},"client/src/pages/Profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { storageService } from \"@/lib/storage\";\nimport { getCurrentBSDateString } from \"@/lib/date-utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  User, \n  Mail, \n  Calendar, \n  BarChart3, \n  TrendingUp, \n  TrendingDown,\n  Settings,\n  Shield,\n  Download\n} from \"lucide-react\";\n\nconst profileSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\n\nexport default function Profile() {\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [stats, setStats] = useState<any>(null);\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      username: user?.username || \"\",\n      email: user?.email || \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (user) {\n      const userStats = storageService.getUserStats(user.id);\n      setStats(userStats);\n      \n      // Reset form with current user data\n      form.reset({\n        firstName: user.firstName,\n        lastName: user.lastName,\n        username: user.username,\n        email: user.email,\n      });\n    }\n  }, [user, form]);\n\n  const onSubmit = async (data: ProfileFormData) => {\n    setIsLoading(true);\n    try {\n      // In a real app, this would update the user in the backend\n      // For now, we'll just show a success message since it's frontend-only\n      toast({\n        title: \"Profile updated!\",\n        description: \"Your profile information has been updated successfully.\",\n      });\n      setIsEditing(false);\n    } catch (error) {\n      toast({\n        title: \"Update failed\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    if (user) {\n      form.reset({\n        firstName: user.firstName,\n        lastName: user.lastName,\n        username: user.username,\n        email: user.email,\n      });\n    }\n  };\n\n  const handleDataExport = () => {\n    if (user) {\n      const userData = {\n        profile: user,\n        transactions: storageService.getUserTransactions(user.id),\n        stats: stats,\n        exportDate: new Date().toISOString(),\n      };\n      \n      const blob = new Blob([JSON.stringify(userData, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `expense-tracker-data-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Data exported\",\n        description: \"Your data has been exported successfully.\",\n      });\n    }\n  };\n\n  const handleLogout = () => {\n    logout();\n    toast({\n      title: \"Logged out\",\n      description: \"You have been logged out successfully.\",\n    });\n  };\n\n  if (!user || !stats) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"text-lg text-muted-foreground\">Loading profile...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <motion.header\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"bg-card border-b border-border px-6 py-4\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-profile-title\">\n              Profile Settings\n            </h2>\n            <p className=\"text-muted-foreground\">Manage your account information and preferences</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Badge variant=\"outline\" data-testid=\"badge-bs-date\">\n              {getCurrentBSDateString()}\n            </Badge>\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-primary-foreground font-medium\" data-testid=\"text-user-avatar\">\n                {user.firstName[0]}{user.lastName[0]}\n              </span>\n            </div>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"p-6 max-w-4xl mx-auto space-y-6\">\n        {/* Profile Information */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.1 }}\n        >\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center space-x-2\" data-testid=\"text-profile-info-title\">\n                  <User className=\"h-5 w-5\" />\n                  <span>Profile Information</span>\n                </CardTitle>\n                <Button\n                  variant={isEditing ? \"outline\" : \"default\"}\n                  onClick={() => setIsEditing(!isEditing)}\n                  data-testid=\"button-edit-profile\"\n                >\n                  {isEditing ? \"Cancel\" : \"Edit Profile\"}\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {isEditing ? (\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        {...form.register(\"firstName\")}\n                        className={form.formState.errors.firstName ? \"border-destructive\" : \"\"}\n                        data-testid=\"input-first-name\"\n                      />\n                      {form.formState.errors.firstName && (\n                        <p className=\"text-sm text-destructive\" data-testid=\"error-first-name\">\n                          {form.formState.errors.firstName.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        {...form.register(\"lastName\")}\n                        className={form.formState.errors.lastName ? \"border-destructive\" : \"\"}\n                        data-testid=\"input-last-name\"\n                      />\n                      {form.formState.errors.lastName && (\n                        <p className=\"text-sm text-destructive\" data-testid=\"error-last-name\">\n                          {form.formState.errors.lastName.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"username\">Username</Label>\n                      <Input\n                        id=\"username\"\n                        {...form.register(\"username\")}\n                        className={form.formState.errors.username ? \"border-destructive\" : \"\"}\n                        data-testid=\"input-username\"\n                      />\n                      {form.formState.errors.username && (\n                        <p className=\"text-sm text-destructive\" data-testid=\"error-username\">\n                          {form.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email Address</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        {...form.register(\"email\")}\n                        className={form.formState.errors.email ? \"border-destructive\" : \"\"}\n                        data-testid=\"input-email\"\n                      />\n                      {form.formState.errors.email && (\n                        <p className=\"text-sm text-destructive\" data-testid=\"error-email\">\n                          {form.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={handleCancelEdit}\n                      data-testid=\"button-cancel-edit\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={isLoading}\n                      data-testid=\"button-save-profile\"\n                    >\n                      {isLoading ? \"Saving...\" : \"Save Changes\"}\n                    </Button>\n                  </div>\n                </form>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <User className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm font-medium text-muted-foreground\">Full Name</span>\n                      </div>\n                      <p className=\"text-foreground font-medium\" data-testid=\"text-full-name\">\n                        {user.firstName} {user.lastName}\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm font-medium text-muted-foreground\">Email</span>\n                      </div>\n                      <p className=\"text-foreground font-medium\" data-testid=\"text-email\">\n                        {user.email}\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Settings className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm font-medium text-muted-foreground\">Username</span>\n                      </div>\n                      <p className=\"text-foreground font-medium\" data-testid=\"text-username\">\n                        {user.username}\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"text-sm font-medium text-muted-foreground\">Member Since</span>\n                      </div>\n                      <p className=\"text-foreground font-medium\" data-testid=\"text-member-since\">\n                        {new Date(user.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Financial Overview */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.2 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\" data-testid=\"text-financial-overview-title\">\n                <BarChart3 className=\"h-5 w-5\" />\n                <span>Financial Overview</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg\">\n                  <TrendingUp className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-total-income\">\n                    रु. {stats.totalIncome.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-green-700\">Total Income</div>\n                </div>\n\n                <div className=\"text-center p-4 bg-gradient-to-r from-red-50 to-red-100 rounded-lg\">\n                  <TrendingDown className=\"h-8 w-8 text-red-600 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-red-600\" data-testid=\"text-total-expenses\">\n                    रु. {stats.totalExpenses.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-red-700\">Total Expenses</div>\n                </div>\n\n                <div className=\"text-center p-4 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg\">\n                  <BarChart3 className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n                  <div className={`text-2xl font-bold ${stats.totalBalance >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"text-net-balance\">\n                    रु. {stats.totalBalance.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-blue-700\">Net Balance</div>\n                </div>\n              </div>\n\n              <Separator className=\"my-6\" />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-center\">\n                <div>\n                  <div className=\"text-lg font-semibold text-foreground\" data-testid=\"text-total-transactions\">\n                    {stats.totalTransactions}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Total Transactions</div>\n                </div>\n\n                <div>\n                  <div className=\"text-lg font-semibold text-foreground\" data-testid=\"text-this-month-income\">\n                    रु. {stats.thisMonthIncome.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">This Month Income</div>\n                </div>\n\n                <div>\n                  <div className=\"text-lg font-semibold text-foreground\" data-testid=\"text-this-month-expenses\">\n                    रु. {stats.thisMonthExpenses.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">This Month Expenses</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Data Management */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.3 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\" data-testid=\"text-data-management-title\">\n                <Shield className=\"h-5 w-5\" />\n                <span>Data Management</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Export Your Data</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Download all your transaction data as a JSON file\n                    </p>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleDataExport}\n                    data-testid=\"button-export-data\"\n                  >\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Export Data\n                  </Button>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">Data Privacy</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Your data is stored locally and never sent to external servers\n                    </p>\n                  </div>\n                  <Badge variant=\"secondary\">\n                    <Shield className=\"h-3 w-3 mr-1\" />\n                    Secure\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Account Actions */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.4 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle data-testid=\"text-account-actions-title\">Account Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleLogout}\n                  data-testid=\"button-logout\"\n                >\n                  Logout\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"text-destructive border-destructive hover:bg-destructive hover:text-destructive-foreground\"\n                  disabled\n                  data-testid=\"button-delete-account\"\n                >\n                  Delete Account (Coming Soon)\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19006},"client/src/pages/Signup.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff, UserPlus, Wallet, CheckCircle } from \"lucide-react\";\n\nconst signupSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupFormData = z.infer<typeof signupSchema>;\n\nconst features = [\n  \"Track income and expenses with Bikram Sambat dates\",\n  \"Beautiful dashboard with financial analytics\", \n  \"Categorize transactions for better insights\",\n  \"Export detailed PDF reports\",\n  \"Secure local storage - your data stays private\"\n];\n\nexport default function Signup() {\n  const [, setLocation] = useLocation();\n  const { register, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const form = useForm<SignupFormData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation(\"/dashboard\");\n    return null;\n  }\n\n  const onSubmit = async (data: SignupFormData) => {\n    setIsLoading(true);\n    try {\n      const success = await register({\n        firstName: data.firstName,\n        lastName: data.lastName,\n        username: data.username,\n        email: data.email,\n        password: data.password,\n      });\n      \n      if (success) {\n        toast({\n          title: \"Account created successfully!\",\n          description: \"Welcome to ExpenseTracker. You can now start managing your finances.\",\n        });\n        setLocation(\"/dashboard\");\n      } else {\n        toast({\n          title: \"Registration Failed\",\n          description: \"Username or email already exists. Please try different credentials.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-center min-h-screen py-8\">\n          {/* Left Side - Features */}\n          <motion.div\n            initial={{ opacity: 0, x: -30 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.5 }}\n            className=\"hidden lg:block\"\n          >\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-primary rounded-xl flex items-center justify-center\">\n                  <Wallet className=\"h-6 w-6 text-primary-foreground\" />\n                </div>\n                <div>\n                  <h1 className=\"text-3xl font-bold text-foreground\">ExpenseTracker</h1>\n                  <p className=\"text-muted-foreground\">Take control of your finances</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h2 className=\"text-xl font-semibold text-foreground\" data-testid=\"text-features-title\">\n                  Why choose ExpenseTracker?\n                </h2>\n                <div className=\"space-y-3\">\n                  {features.map((feature, index) => (\n                    <motion.div\n                      key={feature}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.3, delay: 0.2 + index * 0.1 }}\n                      className=\"flex items-start space-x-3\"\n                      data-testid={`feature-item-${index}`}\n                    >\n                      <CheckCircle className=\"h-5 w-5 text-primary flex-shrink-0 mt-0.5\" />\n                      <span className=\"text-muted-foreground\">{feature}</span>\n                    </motion.div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"bg-gradient-to-r from-primary/10 to-accent/10 rounded-lg p-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary mb-2\">Join thousands of users</div>\n                  <div className=\"text-muted-foreground\">who are already managing their finances better</div>\n                </div>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Right Side - Signup Form */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.4 }}\n            className=\"w-full max-w-md mx-auto\"\n          >\n            <Card className=\"shadow-lg\">\n              <CardHeader className=\"text-center pb-6\">\n                <CardTitle className=\"text-2xl font-bold text-foreground\" data-testid=\"text-signup-title\">\n                  Create Your Account\n                </CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Start your financial journey with ExpenseTracker\n                </p>\n              </CardHeader>\n              \n              <CardContent>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        placeholder=\"John\"\n                        {...form.register(\"firstName\")}\n                        className={form.formState.errors.firstName ? \"border-destructive\" : \"\"}\n                        data-testid=\"input-first-name\"\n                      />\n                      {form.formState.errors.firstName && (\n                        <p className=\"text-sm text-destructive\" data-testid=\"error-first-name\">\n                          {form.formState.errors.firstName.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        placeholder=\"Doe\"\n                        {...form.register(\"lastName\")}\n                        className={form.formState.errors.lastName ? \"border-destructive\" : \"\"}\n                        data-testid=\"input-last-name\"\n                      />\n                      {form.formState.errors.lastName && (\n                        <p className=\"text-sm text-destructive\" data-testid=\"error-last-name\">\n                          {form.formState.errors.lastName.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      placeholder=\"johndoe\"\n                      {...form.register(\"username\")}\n                      className={form.formState.errors.username ? \"border-destructive\" : \"\"}\n                      data-testid=\"input-username\"\n                    />\n                    {form.formState.errors.username && (\n                      <p className=\"text-sm text-destructive\" data-testid=\"error-username\">\n                        {form.formState.errors.username.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"john@example.com\"\n                      {...form.register(\"email\")}\n                      className={form.formState.errors.email ? \"border-destructive\" : \"\"}\n                      data-testid=\"input-email\"\n                    />\n                    {form.formState.errors.email && (\n                      <p className=\"text-sm text-destructive\" data-testid=\"error-email\">\n                        {form.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter your password\"\n                        {...form.register(\"password\")}\n                        className={form.formState.errors.password ? \"border-destructive\" : \"\"}\n                        data-testid=\"input-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        data-testid=\"button-toggle-password\"\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                        )}\n                      </Button>\n                    </div>\n                    {form.formState.errors.password && (\n                      <p className=\"text-sm text-destructive\" data-testid=\"error-password\">\n                        {form.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"confirmPassword\"\n                        type={showConfirmPassword ? \"text\" : \"password\"}\n                        placeholder=\"Confirm your password\"\n                        {...form.register(\"confirmPassword\")}\n                        className={form.formState.errors.confirmPassword ? \"border-destructive\" : \"\"}\n                        data-testid=\"input-confirm-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        data-testid=\"button-toggle-confirm-password\"\n                      >\n                        {showConfirmPassword ? (\n                          <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                        )}\n                      </Button>\n                    </div>\n                    {form.formState.errors.confirmPassword && (\n                      <p className=\"text-sm text-destructive\" data-testid=\"error-confirm-password\">\n                        {form.formState.errors.confirmPassword.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={isLoading}\n                    data-testid=\"button-signup\"\n                  >\n                    {isLoading ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Creating account...\n                      </>\n                    ) : (\n                      <>\n                        <UserPlus className=\"h-4 w-4 mr-2\" />\n                        Create Account\n                      </>\n                    )}\n                  </Button>\n                </form>\n\n                <div className=\"mt-6 text-center\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Already have an account?{\" \"}\n                    <Link href=\"/login\" data-testid=\"link-login\">\n                      <span className=\"text-primary hover:text-primary/80 font-medium cursor-pointer\">\n                        Sign in here\n                      </span>\n                    </Link>\n                  </p>\n                </div>\n\n                <div className=\"mt-4 text-center\">\n                  <Link href=\"/\" data-testid=\"link-home\">\n                    <Button variant=\"ghost\" size=\"sm\">\n                      ← Back to Home\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14337},"client/src/pages/Transactions.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { storageService } from \"@/lib/storage\";\nimport { TransactionList } from \"@/components/TransactionList\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Filter, BarChart3 } from \"lucide-react\";\nimport { Transaction } from \"@shared/schema\";\n\nexport default function Transactions() {\n  const { user } = useAuth();\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [filteredTransactions, setFilteredTransactions] = useState<Transaction[]>([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<\"all\" | \"income\" | \"expense\">(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"all\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      loadTransactions();\n    }\n  }, [user]);\n\n  useEffect(() => {\n    filterTransactions();\n  }, [transactions, searchTerm, typeFilter, categoryFilter]);\n\n  const loadTransactions = () => {\n    if (user) {\n      const userTransactions = storageService.getUserTransactions(user.id);\n      setTransactions(userTransactions.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()));\n      setIsLoading(false);\n    }\n  };\n\n  const filterTransactions = () => {\n    let filtered = [...transactions];\n\n    // Filter by search term\n    if (searchTerm) {\n      filtered = filtered.filter(t => \n        t.category.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        (t.description && t.description.toLowerCase().includes(searchTerm.toLowerCase()))\n      );\n    }\n\n    // Filter by type\n    if (typeFilter !== \"all\") {\n      filtered = filtered.filter(t => t.type === typeFilter);\n    }\n\n    // Filter by category\n    if (categoryFilter !== \"all\") {\n      filtered = filtered.filter(t => t.category === categoryFilter);\n    }\n\n    setFilteredTransactions(filtered);\n  };\n\n  const getUniqueCategories = () => {\n    return Array.from(new Set(transactions.map(t => t.category))).sort();\n  };\n\n  const getTransactionStats = () => {\n    const totalIncome = filteredTransactions\n      .filter(t => t.type === \"income\")\n      .reduce((sum, t) => sum + t.amount, 0);\n    \n    const totalExpenses = filteredTransactions\n      .filter(t => t.type === \"expense\")\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    return {\n      totalIncome,\n      totalExpenses,\n      balance: totalIncome - totalExpenses,\n      count: filteredTransactions.length\n    };\n  };\n\n  const stats = getTransactionStats();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"text-lg text-muted-foreground\">Loading transactions...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <motion.header\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"bg-card border-b border-border px-6 py-4\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-transactions-title\">\n              All Transactions\n            </h2>\n            <p className=\"text-muted-foreground\">View and manage all your financial transactions</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Badge variant=\"outline\" className=\"text-lg px-3 py-1\" data-testid=\"badge-total-count\">\n              {stats.count} transactions\n            </Badge>\n          </div>\n        </div>\n      </motion.header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Summary Cards */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.1 }}\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card className=\"bg-gradient-to-r from-green-50 to-green-100\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-filtered-income\">\n                    रु. {stats.totalIncome.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-green-700\">Total Income</div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-r from-red-50 to-red-100\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-red-600\" data-testid=\"text-filtered-expenses\">\n                    रु. {stats.totalExpenses.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-red-700\">Total Expenses</div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-r from-blue-50 to-blue-100\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <div className={`text-2xl font-bold ${stats.balance >= 0 ? 'text-green-600' : 'text-red-600'}`} data-testid=\"text-filtered-balance\">\n                    रु. {stats.balance.toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-blue-700\">Net Balance</div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-r from-purple-50 to-purple-100\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"text-filtered-count\">\n                    {stats.count}\n                  </div>\n                  <div className=\"text-sm text-purple-700\">Transactions</div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </motion.div>\n\n        {/* Filters */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.2 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\" data-testid=\"text-filters-title\">\n                <Filter className=\"h-5 w-5\" />\n                <span>Filters</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search transactions...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search\"\n                  />\n                </div>\n\n                <Select value={typeFilter} onValueChange={(value: \"all\" | \"income\" | \"expense\") => setTypeFilter(value)}>\n                  <SelectTrigger data-testid=\"select-type-filter\">\n                    <SelectValue placeholder=\"Filter by type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"income\">Income Only</SelectItem>\n                    <SelectItem value=\"expense\">Expenses Only</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                  <SelectTrigger data-testid=\"select-category-filter\">\n                    <SelectValue placeholder=\"Filter by category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {getUniqueCategories().map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    setTypeFilter(\"all\");\n                    setCategoryFilter(\"all\");\n                  }}\n                  data-testid=\"button-clear-filters\"\n                >\n                  Clear Filters\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Transactions List */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.3 }}\n        >\n          {filteredTransactions.length > 0 ? (\n            <TransactionList\n              transactions={filteredTransactions}\n              showActions={false}\n              title={`Filtered Results (${filteredTransactions.length} transactions)`}\n            />\n          ) : (\n            <Card>\n              <CardContent className=\"py-12\">\n                <div className=\"text-center\">\n                  <BarChart3 className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground/50\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"text-no-results\">\n                    No transactions found\n                  </h3>\n                  <p className=\"text-muted-foreground\">\n                    {transactions.length === 0 \n                      ? \"You haven't added any transactions yet.\"\n                      : \"Try adjusting your filters to see more results.\"\n                    }\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10513},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}